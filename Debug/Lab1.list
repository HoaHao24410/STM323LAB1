
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e74  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f80  08002f80  00003f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa4  08002fa4  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa4  08002fa4  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa4  08002fa4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa4  08002fa4  00003fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fa8  08002fa8  00003fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002fac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000068  08003014  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003014  00004170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ab0  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5b  00000000  00000000  0000cb41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0000e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082b  00000000  00000000  0000f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174a1  00000000  00000000  0000fcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1a5  00000000  00000000  0002714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082659  00000000  00000000  000352f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b794a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d4  00000000  00000000  000b7990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000ba364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f68 	.word	0x08002f68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f68 	.word	0x08002f68

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[N0_OF_BUTTONS] = {0};
int button_long_pressed[N0_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000084 	.word	0x20000084

08000180 <getKeyInput>:
}

void subKeyProcess(){
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
}
void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e012      	b.n	80001b2 <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 800018c:	4a46      	ldr	r2, [pc, #280]	@ (80002a8 <getKeyInput+0x128>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4945      	ldr	r1, [pc, #276]	@ (80002ac <getKeyInput+0x12c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 800019c:	4a44      	ldr	r2, [pc, #272]	@ (80002b0 <getKeyInput+0x130>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4940      	ldr	r1, [pc, #256]	@ (80002a8 <getKeyInput+0x128>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3301      	adds	r3, #1
 80001b0:	607b      	str	r3, [r7, #4]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dde9      	ble.n	800018c <getKeyInput+0xc>
	}
	KeyReg0[0] = HAL_GPIO_ReadPin(BTN0_GPIO_Port, BTN0_Pin);
 80001b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001bc:	483d      	ldr	r0, [pc, #244]	@ (80002b4 <getKeyInput+0x134>)
 80001be:	f001 fea5 	bl	8001f0c <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b3a      	ldr	r3, [pc, #232]	@ (80002b0 <getKeyInput+0x130>)
 80001c8:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80001ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001ce:	4839      	ldr	r0, [pc, #228]	@ (80002b4 <getKeyInput+0x134>)
 80001d0:	f001 fe9c 	bl	8001f0c <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b35      	ldr	r3, [pc, #212]	@ (80002b0 <getKeyInput+0x130>)
 80001da:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80001dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001e0:	4834      	ldr	r0, [pc, #208]	@ (80002b4 <getKeyInput+0x134>)
 80001e2:	f001 fe93 	bl	8001f0c <HAL_GPIO_ReadPin>
 80001e6:	4603      	mov	r3, r0
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b31      	ldr	r3, [pc, #196]	@ (80002b0 <getKeyInput+0x130>)
 80001ec:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e050      	b.n	8000296 <getKeyInput+0x116>
		if((KeyReg1[i] == KeyReg0[i]) && (KeyReg2[i] == KeyReg1[i])){
 80001f4:	4a2c      	ldr	r2, [pc, #176]	@ (80002a8 <getKeyInput+0x128>)
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fc:	492c      	ldr	r1, [pc, #176]	@ (80002b0 <getKeyInput+0x130>)
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	d143      	bne.n	8000290 <getKeyInput+0x110>
 8000208:	4a28      	ldr	r2, [pc, #160]	@ (80002ac <getKeyInput+0x12c>)
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4925      	ldr	r1, [pc, #148]	@ (80002a8 <getKeyInput+0x128>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000218:	429a      	cmp	r2, r3
 800021a:	d139      	bne.n	8000290 <getKeyInput+0x110>
			if(KeyReg2[i] != KeyReg3[i]){
 800021c:	4a23      	ldr	r2, [pc, #140]	@ (80002ac <getKeyInput+0x12c>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4924      	ldr	r1, [pc, #144]	@ (80002b8 <getKeyInput+0x138>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022c:	429a      	cmp	r2, r3
 800022e:	d017      	beq.n	8000260 <getKeyInput+0xe0>
				KeyReg3[i] = KeyReg2[i];
 8000230:	4a1e      	ldr	r2, [pc, #120]	@ (80002ac <getKeyInput+0x12c>)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000238:	491f      	ldr	r1, [pc, #124]	@ (80002b8 <getKeyInput+0x138>)
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyReg3[i] == PRESSED_STATE){
 8000240:	4a1d      	ldr	r2, [pc, #116]	@ (80002b8 <getKeyInput+0x138>)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d121      	bne.n	8000290 <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 800024c:	4b1b      	ldr	r3, [pc, #108]	@ (80002bc <getKeyInput+0x13c>)
 800024e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000252:	601a      	str	r2, [r3, #0]
					button_flag[i] = 1;
 8000254:	4a1a      	ldr	r2, [pc, #104]	@ (80002c0 <getKeyInput+0x140>)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2101      	movs	r1, #1
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800025e:	e017      	b.n	8000290 <getKeyInput+0x110>
				}
			}
			else{
				TimeOutForKeyPress--;
 8000260:	4b16      	ldr	r3, [pc, #88]	@ (80002bc <getKeyInput+0x13c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3b01      	subs	r3, #1
 8000266:	4a15      	ldr	r2, [pc, #84]	@ (80002bc <getKeyInput+0x13c>)
 8000268:	6013      	str	r3, [r2, #0]
				if(TimeOutForKeyPress == 0){
 800026a:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <getKeyInput+0x13c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10e      	bne.n	8000290 <getKeyInput+0x110>
					TimeOutForKeyPress = 500;
 8000272:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <getKeyInput+0x13c>)
 8000274:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000278:	601a      	str	r2, [r3, #0]

					if(KeyReg3[i] == PRESSED_STATE){
 800027a:	4a0f      	ldr	r2, [pc, #60]	@ (80002b8 <getKeyInput+0x138>)
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d104      	bne.n	8000290 <getKeyInput+0x110>
						button_flag[i] = 1;
 8000286:	4a0e      	ldr	r2, [pc, #56]	@ (80002c0 <getKeyInput+0x140>)
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	2101      	movs	r1, #1
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	603b      	str	r3, [r7, #0]
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b02      	cmp	r3, #2
 800029a:	ddab      	ble.n	80001f4 <getKeyInput+0x74>
					}
				}
			}
		}
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000000c 	.word	0x2000000c
 80002ac:	20000018 	.word	0x20000018
 80002b0:	20000000 	.word	0x20000000
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000024 	.word	0x20000024
 80002bc:	20000030 	.word	0x20000030
 80002c0:	20000084 	.word	0x20000084

080002c4 <fsm_automatic_run>:
 *  Created on: Nov 30, 2024
 *      Author: ASUS
 */
#include "fsm_automatic.h"

void fsm_automatic_run(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	switch(status){
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <fsm_automatic_run+0x230>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	2b04      	cmp	r3, #4
 80002d0:	f200 8209 	bhi.w	80006e6 <fsm_automatic_run+0x422>
 80002d4:	a201      	add	r2, pc, #4	@ (adr r2, 80002dc <fsm_automatic_run+0x18>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	080002f1 	.word	0x080002f1
 80002e0:	08000319 	.word	0x08000319
 80002e4:	08000407 	.word	0x08000407
 80002e8:	0800052d 	.word	0x0800052d
 80002ec:	08000619 	.word	0x08000619
		case INIT:
			value = 1;
 80002f0:	4b81      	ldr	r3, [pc, #516]	@ (80004f8 <fsm_automatic_run+0x234>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]
			status = GREEN_RED;
 80002f6:	4b7f      	ldr	r3, [pc, #508]	@ (80004f4 <fsm_automatic_run+0x230>)
 80002f8:	2202      	movs	r2, #2
 80002fa:	601a      	str	r2, [r3, #0]
			clearAll_led();
 80002fc:	f001 fa4c 	bl	8001798 <clearAll_led>
			//updateClockBuffer(r, g);
			setTimer1(jump1);
 8000300:	4b7e      	ldr	r3, [pc, #504]	@ (80004fc <fsm_automatic_run+0x238>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f001 f937 	bl	8001578 <setTimer1>
			setTimer2(1);
 800030a:	2001      	movs	r0, #1
 800030c:	f001 f948 	bl	80015a0 <setTimer2>
			setTimer3(1);
 8000310:	2001      	movs	r0, #1
 8000312:	f001 f959 	bl	80015c8 <setTimer3>
			break;
 8000316:	e1ef      	b.n	80006f8 <fsm_automatic_run+0x434>
		case GREEN_RED:
			led_green_red();
 8000318:	f001 fa6a 	bl	80017f0 <led_green_red>
			if(timer2_flag == 1){
 800031c:	4b78      	ldr	r3, [pc, #480]	@ (8000500 <fsm_automatic_run+0x23c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d113      	bne.n	800034c <fsm_automatic_run+0x88>
				setTimer2(5);
 8000324:	2005      	movs	r0, #5
 8000326:	f001 f93b 	bl	80015a0 <setTimer2>
				update7SEG(index_led);
 800032a:	4b76      	ldr	r3, [pc, #472]	@ (8000504 <fsm_automatic_run+0x240>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fda6 	bl	8000e80 <update7SEG>
				index_led ++;
 8000334:	4b73      	ldr	r3, [pc, #460]	@ (8000504 <fsm_automatic_run+0x240>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a72      	ldr	r2, [pc, #456]	@ (8000504 <fsm_automatic_run+0x240>)
 800033c:	6013      	str	r3, [r2, #0]
				if(index_led > 3){
 800033e:	4b71      	ldr	r3, [pc, #452]	@ (8000504 <fsm_automatic_run+0x240>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b03      	cmp	r3, #3
 8000344:	dd02      	ble.n	800034c <fsm_automatic_run+0x88>
					index_led = 0;
 8000346:	4b6f      	ldr	r3, [pc, #444]	@ (8000504 <fsm_automatic_run+0x240>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer3_flag == 1){
 800034c:	4b6e      	ldr	r3, [pc, #440]	@ (8000508 <fsm_automatic_run+0x244>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d124      	bne.n	800039e <fsm_automatic_run+0xda>
				setTimer3(100);
 8000354:	2064      	movs	r0, #100	@ 0x64
 8000356:	f001 f937 	bl	80015c8 <setTimer3>
				updateClockBuffer(r, g);
 800035a:	4b6c      	ldr	r3, [pc, #432]	@ (800050c <fsm_automatic_run+0x248>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a6c      	ldr	r2, [pc, #432]	@ (8000510 <fsm_automatic_run+0x24c>)
 8000360:	6812      	ldr	r2, [r2, #0]
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fe15 	bl	8000f94 <updateClockBuffer>
				r--;
 800036a:	4b68      	ldr	r3, [pc, #416]	@ (800050c <fsm_automatic_run+0x248>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	3b01      	subs	r3, #1
 8000370:	4a66      	ldr	r2, [pc, #408]	@ (800050c <fsm_automatic_run+0x248>)
 8000372:	6013      	str	r3, [r2, #0]
				g--;
 8000374:	4b66      	ldr	r3, [pc, #408]	@ (8000510 <fsm_automatic_run+0x24c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3b01      	subs	r3, #1
 800037a:	4a65      	ldr	r2, [pc, #404]	@ (8000510 <fsm_automatic_run+0x24c>)
 800037c:	6013      	str	r3, [r2, #0]
				if(g == 0){
 800037e:	4b64      	ldr	r3, [pc, #400]	@ (8000510 <fsm_automatic_run+0x24c>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d103      	bne.n	800038e <fsm_automatic_run+0xca>
					g = max_g;
 8000386:	4b63      	ldr	r3, [pc, #396]	@ (8000514 <fsm_automatic_run+0x250>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a61      	ldr	r2, [pc, #388]	@ (8000510 <fsm_automatic_run+0x24c>)
 800038c:	6013      	str	r3, [r2, #0]
				}
				if(r == 0){
 800038e:	4b5f      	ldr	r3, [pc, #380]	@ (800050c <fsm_automatic_run+0x248>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d103      	bne.n	800039e <fsm_automatic_run+0xda>
					r = max_r;
 8000396:	4b60      	ldr	r3, [pc, #384]	@ (8000518 <fsm_automatic_run+0x254>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a5c      	ldr	r2, [pc, #368]	@ (800050c <fsm_automatic_run+0x248>)
 800039c:	6013      	str	r3, [r2, #0]
				}
				//updateClockBuffer(r, g);
			}
			if(timer1_flag == 1){
 800039e:	4b5f      	ldr	r3, [pc, #380]	@ (800051c <fsm_automatic_run+0x258>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d111      	bne.n	80003ca <fsm_automatic_run+0x106>
				status = AMBER_RED;
 80003a6:	4b53      	ldr	r3, [pc, #332]	@ (80004f4 <fsm_automatic_run+0x230>)
 80003a8:	2203      	movs	r2, #3
 80003aa:	601a      	str	r2, [r3, #0]
				updateClockBuffer(r, a);
 80003ac:	4b57      	ldr	r3, [pc, #348]	@ (800050c <fsm_automatic_run+0x248>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a5b      	ldr	r2, [pc, #364]	@ (8000520 <fsm_automatic_run+0x25c>)
 80003b2:	6812      	ldr	r2, [r2, #0]
 80003b4:	4611      	mov	r1, r2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fdec 	bl	8000f94 <updateClockBuffer>
				setTimer1(jump2);
 80003bc:	4b59      	ldr	r3, [pc, #356]	@ (8000524 <fsm_automatic_run+0x260>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 f8d9 	bl	8001578 <setTimer1>
				clearAll_led();
 80003c6:	f001 f9e7 	bl	8001798 <clearAll_led>
			}

			if(isButtonPressed(0) == 1){
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff febe 	bl	800014c <isButtonPressed>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d10a      	bne.n	80003ec <fsm_automatic_run+0x128>
				status = SETTING_RED;
 80003d6:	4b47      	ldr	r3, [pc, #284]	@ (80004f4 <fsm_automatic_run+0x230>)
 80003d8:	2216      	movs	r2, #22
 80003da:	601a      	str	r2, [r3, #0]
				setTimer1(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f001 f8cb 	bl	8001578 <setTimer1>
				setTimer2(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f001 f8dc 	bl	80015a0 <setTimer2>
				clearAll_led();
 80003e8:	f001 f9d6 	bl	8001798 <clearAll_led>
			}
			if(isButtonPressed(2) == 1){
 80003ec:	2002      	movs	r0, #2
 80003ee:	f7ff fead 	bl	800014c <isButtonPressed>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	f040 8178 	bne.w	80006ea <fsm_automatic_run+0x426>
				status = MAN_GREEN_RED;
 80003fa:	4b3e      	ldr	r3, [pc, #248]	@ (80004f4 <fsm_automatic_run+0x230>)
 80003fc:	220c      	movs	r2, #12
 80003fe:	601a      	str	r2, [r3, #0]
				clearAll_led();
 8000400:	f001 f9ca 	bl	8001798 <clearAll_led>
			}

			break;
 8000404:	e171      	b.n	80006ea <fsm_automatic_run+0x426>
		case AMBER_RED:
			led_amber_red();
 8000406:	f001 fa07 	bl	8001818 <led_amber_red>
			if(timer2_flag == 1){
 800040a:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <fsm_automatic_run+0x23c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d113      	bne.n	800043a <fsm_automatic_run+0x176>
				setTimer2(5);
 8000412:	2005      	movs	r0, #5
 8000414:	f001 f8c4 	bl	80015a0 <setTimer2>
				update7SEG(index_led);
 8000418:	4b3a      	ldr	r3, [pc, #232]	@ (8000504 <fsm_automatic_run+0x240>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fd2f 	bl	8000e80 <update7SEG>
				index_led ++;
 8000422:	4b38      	ldr	r3, [pc, #224]	@ (8000504 <fsm_automatic_run+0x240>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	4a36      	ldr	r2, [pc, #216]	@ (8000504 <fsm_automatic_run+0x240>)
 800042a:	6013      	str	r3, [r2, #0]
				if(index_led > 3){
 800042c:	4b35      	ldr	r3, [pc, #212]	@ (8000504 <fsm_automatic_run+0x240>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b03      	cmp	r3, #3
 8000432:	dd02      	ble.n	800043a <fsm_automatic_run+0x176>
					index_led = 0;
 8000434:	4b33      	ldr	r3, [pc, #204]	@ (8000504 <fsm_automatic_run+0x240>)
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer3_flag == 1){
 800043a:	4b33      	ldr	r3, [pc, #204]	@ (8000508 <fsm_automatic_run+0x244>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d124      	bne.n	800048c <fsm_automatic_run+0x1c8>
				setTimer3(100);
 8000442:	2064      	movs	r0, #100	@ 0x64
 8000444:	f001 f8c0 	bl	80015c8 <setTimer3>
				updateClockBuffer(r, a);
 8000448:	4b30      	ldr	r3, [pc, #192]	@ (800050c <fsm_automatic_run+0x248>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a34      	ldr	r2, [pc, #208]	@ (8000520 <fsm_automatic_run+0x25c>)
 800044e:	6812      	ldr	r2, [r2, #0]
 8000450:	4611      	mov	r1, r2
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fd9e 	bl	8000f94 <updateClockBuffer>
				r--;
 8000458:	4b2c      	ldr	r3, [pc, #176]	@ (800050c <fsm_automatic_run+0x248>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	4a2b      	ldr	r2, [pc, #172]	@ (800050c <fsm_automatic_run+0x248>)
 8000460:	6013      	str	r3, [r2, #0]
				a--;
 8000462:	4b2f      	ldr	r3, [pc, #188]	@ (8000520 <fsm_automatic_run+0x25c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	3b01      	subs	r3, #1
 8000468:	4a2d      	ldr	r2, [pc, #180]	@ (8000520 <fsm_automatic_run+0x25c>)
 800046a:	6013      	str	r3, [r2, #0]

				if(a == 0){
 800046c:	4b2c      	ldr	r3, [pc, #176]	@ (8000520 <fsm_automatic_run+0x25c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d103      	bne.n	800047c <fsm_automatic_run+0x1b8>
					a = max_a;
 8000474:	4b2c      	ldr	r3, [pc, #176]	@ (8000528 <fsm_automatic_run+0x264>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a29      	ldr	r2, [pc, #164]	@ (8000520 <fsm_automatic_run+0x25c>)
 800047a:	6013      	str	r3, [r2, #0]
				}
				if(r == 0){
 800047c:	4b23      	ldr	r3, [pc, #140]	@ (800050c <fsm_automatic_run+0x248>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d103      	bne.n	800048c <fsm_automatic_run+0x1c8>
					r = max_r;
 8000484:	4b24      	ldr	r3, [pc, #144]	@ (8000518 <fsm_automatic_run+0x254>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a20      	ldr	r2, [pc, #128]	@ (800050c <fsm_automatic_run+0x248>)
 800048a:	6013      	str	r3, [r2, #0]
				}
			}

			if(timer1_flag == 1){
 800048c:	4b23      	ldr	r3, [pc, #140]	@ (800051c <fsm_automatic_run+0x258>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d111      	bne.n	80004b8 <fsm_automatic_run+0x1f4>
				status = RED_GREEN;
 8000494:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <fsm_automatic_run+0x230>)
 8000496:	2204      	movs	r2, #4
 8000498:	601a      	str	r2, [r3, #0]
				updateClockBuffer(g, r);
 800049a:	4b1d      	ldr	r3, [pc, #116]	@ (8000510 <fsm_automatic_run+0x24c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <fsm_automatic_run+0x248>)
 80004a0:	6812      	ldr	r2, [r2, #0]
 80004a2:	4611      	mov	r1, r2
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fd75 	bl	8000f94 <updateClockBuffer>
				setTimer1(jump1);
 80004aa:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <fsm_automatic_run+0x238>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 f862 	bl	8001578 <setTimer1>
				clearAll_led();
 80004b4:	f001 f970 	bl	8001798 <clearAll_led>
			}
			if(isButtonPressed(0) == 1){
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff fe47 	bl	800014c <isButtonPressed>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d10a      	bne.n	80004da <fsm_automatic_run+0x216>
				status = SETTING_RED;
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <fsm_automatic_run+0x230>)
 80004c6:	2216      	movs	r2, #22
 80004c8:	601a      	str	r2, [r3, #0]
				setTimer1(1);
 80004ca:	2001      	movs	r0, #1
 80004cc:	f001 f854 	bl	8001578 <setTimer1>
				setTimer2(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f001 f865 	bl	80015a0 <setTimer2>
				clearAll_led();
 80004d6:	f001 f95f 	bl	8001798 <clearAll_led>
			}
			if(isButtonPressed(2) == 1){
 80004da:	2002      	movs	r0, #2
 80004dc:	f7ff fe36 	bl	800014c <isButtonPressed>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	f040 8103 	bne.w	80006ee <fsm_automatic_run+0x42a>
				status = MAN_GREEN_RED;
 80004e8:	4b02      	ldr	r3, [pc, #8]	@ (80004f4 <fsm_automatic_run+0x230>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	601a      	str	r2, [r3, #0]
				clearAll_led();
 80004ee:	f001 f953 	bl	8001798 <clearAll_led>
			}
			break;
 80004f2:	e0fc      	b.n	80006ee <fsm_automatic_run+0x42a>
 80004f4:	20000034 	.word	0x20000034
 80004f8:	20000058 	.word	0x20000058
 80004fc:	20000044 	.word	0x20000044
 8000500:	20000160 	.word	0x20000160
 8000504:	20000168 	.word	0x20000168
 8000508:	20000164 	.word	0x20000164
 800050c:	20000038 	.word	0x20000038
 8000510:	2000003c 	.word	0x2000003c
 8000514:	20000050 	.word	0x20000050
 8000518:	2000004c 	.word	0x2000004c
 800051c:	2000015c 	.word	0x2000015c
 8000520:	20000040 	.word	0x20000040
 8000524:	20000048 	.word	0x20000048
 8000528:	20000054 	.word	0x20000054
		case RED_GREEN:
			led_red_green();
 800052c:	f001 f986 	bl	800183c <led_red_green>
			if(timer2_flag == 1){
 8000530:	4b72      	ldr	r3, [pc, #456]	@ (80006fc <fsm_automatic_run+0x438>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d113      	bne.n	8000560 <fsm_automatic_run+0x29c>
				setTimer2(5);
 8000538:	2005      	movs	r0, #5
 800053a:	f001 f831 	bl	80015a0 <setTimer2>
				update7SEG(index_led);
 800053e:	4b70      	ldr	r3, [pc, #448]	@ (8000700 <fsm_automatic_run+0x43c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fc9c 	bl	8000e80 <update7SEG>
				index_led ++;
 8000548:	4b6d      	ldr	r3, [pc, #436]	@ (8000700 <fsm_automatic_run+0x43c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a6c      	ldr	r2, [pc, #432]	@ (8000700 <fsm_automatic_run+0x43c>)
 8000550:	6013      	str	r3, [r2, #0]
				if(index_led > 3){
 8000552:	4b6b      	ldr	r3, [pc, #428]	@ (8000700 <fsm_automatic_run+0x43c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b03      	cmp	r3, #3
 8000558:	dd02      	ble.n	8000560 <fsm_automatic_run+0x29c>
					index_led = 0;
 800055a:	4b69      	ldr	r3, [pc, #420]	@ (8000700 <fsm_automatic_run+0x43c>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer3_flag == 1){
 8000560:	4b68      	ldr	r3, [pc, #416]	@ (8000704 <fsm_automatic_run+0x440>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d124      	bne.n	80005b2 <fsm_automatic_run+0x2ee>
				setTimer3(100);
 8000568:	2064      	movs	r0, #100	@ 0x64
 800056a:	f001 f82d 	bl	80015c8 <setTimer3>
				updateClockBuffer(g, r);
 800056e:	4b66      	ldr	r3, [pc, #408]	@ (8000708 <fsm_automatic_run+0x444>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a66      	ldr	r2, [pc, #408]	@ (800070c <fsm_automatic_run+0x448>)
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	4611      	mov	r1, r2
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fd0b 	bl	8000f94 <updateClockBuffer>
				r--;
 800057e:	4b63      	ldr	r3, [pc, #396]	@ (800070c <fsm_automatic_run+0x448>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	3b01      	subs	r3, #1
 8000584:	4a61      	ldr	r2, [pc, #388]	@ (800070c <fsm_automatic_run+0x448>)
 8000586:	6013      	str	r3, [r2, #0]
				g--;
 8000588:	4b5f      	ldr	r3, [pc, #380]	@ (8000708 <fsm_automatic_run+0x444>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a5e      	ldr	r2, [pc, #376]	@ (8000708 <fsm_automatic_run+0x444>)
 8000590:	6013      	str	r3, [r2, #0]

				if(g == 0){
 8000592:	4b5d      	ldr	r3, [pc, #372]	@ (8000708 <fsm_automatic_run+0x444>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <fsm_automatic_run+0x2de>
					g = max_g;
 800059a:	4b5d      	ldr	r3, [pc, #372]	@ (8000710 <fsm_automatic_run+0x44c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a5a      	ldr	r2, [pc, #360]	@ (8000708 <fsm_automatic_run+0x444>)
 80005a0:	6013      	str	r3, [r2, #0]
				}
				if(r == 0){
 80005a2:	4b5a      	ldr	r3, [pc, #360]	@ (800070c <fsm_automatic_run+0x448>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d103      	bne.n	80005b2 <fsm_automatic_run+0x2ee>
					r = max_r;
 80005aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000714 <fsm_automatic_run+0x450>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a57      	ldr	r2, [pc, #348]	@ (800070c <fsm_automatic_run+0x448>)
 80005b0:	6013      	str	r3, [r2, #0]
				}

			}

			if(timer1_flag == 1){
 80005b2:	4b59      	ldr	r3, [pc, #356]	@ (8000718 <fsm_automatic_run+0x454>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d111      	bne.n	80005de <fsm_automatic_run+0x31a>
				status = RED_AMBER;
 80005ba:	4b58      	ldr	r3, [pc, #352]	@ (800071c <fsm_automatic_run+0x458>)
 80005bc:	2205      	movs	r2, #5
 80005be:	601a      	str	r2, [r3, #0]
				updateClockBuffer(a, r);
 80005c0:	4b57      	ldr	r3, [pc, #348]	@ (8000720 <fsm_automatic_run+0x45c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a51      	ldr	r2, [pc, #324]	@ (800070c <fsm_automatic_run+0x448>)
 80005c6:	6812      	ldr	r2, [r2, #0]
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fce2 	bl	8000f94 <updateClockBuffer>
				setTimer1(jump2);
 80005d0:	4b54      	ldr	r3, [pc, #336]	@ (8000724 <fsm_automatic_run+0x460>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ffcf 	bl	8001578 <setTimer1>
				clearAll_led();
 80005da:	f001 f8dd 	bl	8001798 <clearAll_led>
			}
			if(isButtonPressed(0) == 1){
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff fdb4 	bl	800014c <isButtonPressed>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d10a      	bne.n	8000600 <fsm_automatic_run+0x33c>
				status = SETTING_RED;
 80005ea:	4b4c      	ldr	r3, [pc, #304]	@ (800071c <fsm_automatic_run+0x458>)
 80005ec:	2216      	movs	r2, #22
 80005ee:	601a      	str	r2, [r3, #0]
				setTimer1(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 ffc1 	bl	8001578 <setTimer1>
				setTimer2(1);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 ffd2 	bl	80015a0 <setTimer2>
				clearAll_led();
 80005fc:	f001 f8cc 	bl	8001798 <clearAll_led>
			}
			if(isButtonPressed(2) == 1){
 8000600:	2002      	movs	r0, #2
 8000602:	f7ff fda3 	bl	800014c <isButtonPressed>
 8000606:	4603      	mov	r3, r0
 8000608:	2b01      	cmp	r3, #1
 800060a:	d172      	bne.n	80006f2 <fsm_automatic_run+0x42e>
				status = MAN_GREEN_RED;
 800060c:	4b43      	ldr	r3, [pc, #268]	@ (800071c <fsm_automatic_run+0x458>)
 800060e:	220c      	movs	r2, #12
 8000610:	601a      	str	r2, [r3, #0]
				clearAll_led();
 8000612:	f001 f8c1 	bl	8001798 <clearAll_led>
			}
			break;
 8000616:	e06c      	b.n	80006f2 <fsm_automatic_run+0x42e>
		case RED_AMBER:
			led_red_amber();
 8000618:	f001 f922 	bl	8001860 <led_red_amber>
			if(timer2_flag == 1){
 800061c:	4b37      	ldr	r3, [pc, #220]	@ (80006fc <fsm_automatic_run+0x438>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d113      	bne.n	800064c <fsm_automatic_run+0x388>
				setTimer2(5);
 8000624:	2005      	movs	r0, #5
 8000626:	f000 ffbb 	bl	80015a0 <setTimer2>
				update7SEG(index_led);
 800062a:	4b35      	ldr	r3, [pc, #212]	@ (8000700 <fsm_automatic_run+0x43c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fc26 	bl	8000e80 <update7SEG>
				index_led ++;
 8000634:	4b32      	ldr	r3, [pc, #200]	@ (8000700 <fsm_automatic_run+0x43c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a31      	ldr	r2, [pc, #196]	@ (8000700 <fsm_automatic_run+0x43c>)
 800063c:	6013      	str	r3, [r2, #0]
				if(index_led > 3){
 800063e:	4b30      	ldr	r3, [pc, #192]	@ (8000700 <fsm_automatic_run+0x43c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b03      	cmp	r3, #3
 8000644:	dd02      	ble.n	800064c <fsm_automatic_run+0x388>
					index_led = 0;
 8000646:	4b2e      	ldr	r3, [pc, #184]	@ (8000700 <fsm_automatic_run+0x43c>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer3_flag == 1){
 800064c:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <fsm_automatic_run+0x440>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d124      	bne.n	800069e <fsm_automatic_run+0x3da>
				setTimer3(100);
 8000654:	2064      	movs	r0, #100	@ 0x64
 8000656:	f000 ffb7 	bl	80015c8 <setTimer3>
				updateClockBuffer(r, a);
 800065a:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <fsm_automatic_run+0x448>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a30      	ldr	r2, [pc, #192]	@ (8000720 <fsm_automatic_run+0x45c>)
 8000660:	6812      	ldr	r2, [r2, #0]
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fc95 	bl	8000f94 <updateClockBuffer>
				r--;
 800066a:	4b28      	ldr	r3, [pc, #160]	@ (800070c <fsm_automatic_run+0x448>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3b01      	subs	r3, #1
 8000670:	4a26      	ldr	r2, [pc, #152]	@ (800070c <fsm_automatic_run+0x448>)
 8000672:	6013      	str	r3, [r2, #0]
				a--;
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <fsm_automatic_run+0x45c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	4a29      	ldr	r2, [pc, #164]	@ (8000720 <fsm_automatic_run+0x45c>)
 800067c:	6013      	str	r3, [r2, #0]

				if(a == 0){
 800067e:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <fsm_automatic_run+0x45c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d103      	bne.n	800068e <fsm_automatic_run+0x3ca>
					a = max_a;
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <fsm_automatic_run+0x464>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a25      	ldr	r2, [pc, #148]	@ (8000720 <fsm_automatic_run+0x45c>)
 800068c:	6013      	str	r3, [r2, #0]
				}
				if(r == 0){
 800068e:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <fsm_automatic_run+0x448>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d103      	bne.n	800069e <fsm_automatic_run+0x3da>
					r = max_r;
 8000696:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <fsm_automatic_run+0x450>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <fsm_automatic_run+0x448>)
 800069c:	6013      	str	r3, [r2, #0]
				}
			}

			if(timer1_flag == 1){
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <fsm_automatic_run+0x454>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d102      	bne.n	80006ac <fsm_automatic_run+0x3e8>
				status = INIT;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <fsm_automatic_run+0x458>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(0) == 1){
 80006ac:	2000      	movs	r0, #0
 80006ae:	f7ff fd4d 	bl	800014c <isButtonPressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10a      	bne.n	80006ce <fsm_automatic_run+0x40a>
				status = SETTING_RED;
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <fsm_automatic_run+0x458>)
 80006ba:	2216      	movs	r2, #22
 80006bc:	601a      	str	r2, [r3, #0]
				setTimer1(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 ff5a 	bl	8001578 <setTimer1>
				setTimer2(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 ff6b 	bl	80015a0 <setTimer2>
				clearAll_led();
 80006ca:	f001 f865 	bl	8001798 <clearAll_led>
			}
			if(isButtonPressed(2) == 1){
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff fd3c 	bl	800014c <isButtonPressed>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d10d      	bne.n	80006f6 <fsm_automatic_run+0x432>
				status = MAN_GREEN_RED;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <fsm_automatic_run+0x458>)
 80006dc:	220c      	movs	r2, #12
 80006de:	601a      	str	r2, [r3, #0]
				clearAll_led();
 80006e0:	f001 f85a 	bl	8001798 <clearAll_led>
			}
			break;
 80006e4:	e007      	b.n	80006f6 <fsm_automatic_run+0x432>
		default:
			break;
 80006e6:	bf00      	nop
 80006e8:	e006      	b.n	80006f8 <fsm_automatic_run+0x434>
			break;
 80006ea:	bf00      	nop
 80006ec:	e004      	b.n	80006f8 <fsm_automatic_run+0x434>
			break;
 80006ee:	bf00      	nop
 80006f0:	e002      	b.n	80006f8 <fsm_automatic_run+0x434>
			break;
 80006f2:	bf00      	nop
 80006f4:	e000      	b.n	80006f8 <fsm_automatic_run+0x434>
			break;
 80006f6:	bf00      	nop
	}
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000160 	.word	0x20000160
 8000700:	20000168 	.word	0x20000168
 8000704:	20000164 	.word	0x20000164
 8000708:	2000003c 	.word	0x2000003c
 800070c:	20000038 	.word	0x20000038
 8000710:	20000050 	.word	0x20000050
 8000714:	2000004c 	.word	0x2000004c
 8000718:	2000015c 	.word	0x2000015c
 800071c:	20000034 	.word	0x20000034
 8000720:	20000040 	.word	0x20000040
 8000724:	20000048 	.word	0x20000048
 8000728:	20000054 	.word	0x20000054

0800072c <fsm_manual_run>:
 *  Created on: Nov 30, 2024
 *      Author: ASUS
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	switch(status){
 8000730:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <fsm_manual_run+0xbc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3b0c      	subs	r3, #12
 8000736:	2b03      	cmp	r3, #3
 8000738:	d849      	bhi.n	80007ce <fsm_manual_run+0xa2>
 800073a:	a201      	add	r2, pc, #4	@ (adr r2, 8000740 <fsm_manual_run+0x14>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000751 	.word	0x08000751
 8000744:	0800076d 	.word	0x0800076d
 8000748:	08000789 	.word	0x08000789
 800074c:	080007a5 	.word	0x080007a5
		case MAN_GREEN_RED:
			led_green_red();
 8000750:	f001 f84e 	bl	80017f0 <led_green_red>
			if(isButtonPressed(2)== 1){
 8000754:	2002      	movs	r0, #2
 8000756:	f7ff fcf9 	bl	800014c <isButtonPressed>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d12f      	bne.n	80007c0 <fsm_manual_run+0x94>
				status = MAN_AMBER_RED;
 8000760:	4b21      	ldr	r3, [pc, #132]	@ (80007e8 <fsm_manual_run+0xbc>)
 8000762:	220d      	movs	r2, #13
 8000764:	601a      	str	r2, [r3, #0]
				clearAll_led();
 8000766:	f001 f817 	bl	8001798 <clearAll_led>
			}
		break;
 800076a:	e029      	b.n	80007c0 <fsm_manual_run+0x94>
		case MAN_AMBER_RED:
			led_amber_red();
 800076c:	f001 f854 	bl	8001818 <led_amber_red>
			if(isButtonPressed(2)== 1){
 8000770:	2002      	movs	r0, #2
 8000772:	f7ff fceb 	bl	800014c <isButtonPressed>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d123      	bne.n	80007c4 <fsm_manual_run+0x98>
				status = MAN_RED_GREEN;
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <fsm_manual_run+0xbc>)
 800077e:	220e      	movs	r2, #14
 8000780:	601a      	str	r2, [r3, #0]
				clearAll_led();
 8000782:	f001 f809 	bl	8001798 <clearAll_led>
			}
		break;
 8000786:	e01d      	b.n	80007c4 <fsm_manual_run+0x98>
		case MAN_RED_GREEN:
			led_red_green();
 8000788:	f001 f858 	bl	800183c <led_red_green>
			if(isButtonPressed(2)== 1){
 800078c:	2002      	movs	r0, #2
 800078e:	f7ff fcdd 	bl	800014c <isButtonPressed>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d117      	bne.n	80007c8 <fsm_manual_run+0x9c>
				status = MAN_RED_AMBER;
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <fsm_manual_run+0xbc>)
 800079a:	220f      	movs	r2, #15
 800079c:	601a      	str	r2, [r3, #0]
				clearAll_led();
 800079e:	f000 fffb 	bl	8001798 <clearAll_led>
			}
		break;
 80007a2:	e011      	b.n	80007c8 <fsm_manual_run+0x9c>
		case MAN_RED_AMBER:
			led_red_amber();
 80007a4:	f001 f85c 	bl	8001860 <led_red_amber>
			if(isButtonPressed(2)== 1){
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff fccf 	bl	800014c <isButtonPressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10b      	bne.n	80007cc <fsm_manual_run+0xa0>
				status = MAN_GREEN_RED;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <fsm_manual_run+0xbc>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
				clearAll_led();
 80007ba:	f000 ffed 	bl	8001798 <clearAll_led>
			}
		break;
 80007be:	e005      	b.n	80007cc <fsm_manual_run+0xa0>
		break;
 80007c0:	bf00      	nop
 80007c2:	e004      	b.n	80007ce <fsm_manual_run+0xa2>
		break;
 80007c4:	bf00      	nop
 80007c6:	e002      	b.n	80007ce <fsm_manual_run+0xa2>
		break;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <fsm_manual_run+0xa2>
		break;
 80007cc:	bf00      	nop
	}
	if(isButtonPressed(0) == 1){
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff fcbc 	bl	800014c <isButtonPressed>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d104      	bne.n	80007e4 <fsm_manual_run+0xb8>
		status = INIT;
 80007da:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <fsm_manual_run+0xbc>)
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
		clearAll_led();
 80007e0:	f000 ffda 	bl	8001798 <clearAll_led>
	}

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000034 	.word	0x20000034

080007ec <fsm_setting_run>:
 *
 *  Created on: Nov 30, 2024
 *      Author: ASUS
 */
#include "fsm_setting.h"
void fsm_setting_run(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	switch(status){
 80007f0:	4b7e      	ldr	r3, [pc, #504]	@ (80009ec <fsm_setting_run+0x200>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b18      	cmp	r3, #24
 80007f6:	f000 8081 	beq.w	80008fc <fsm_setting_run+0x110>
 80007fa:	2b18      	cmp	r3, #24
 80007fc:	f300 818b 	bgt.w	8000b16 <fsm_setting_run+0x32a>
 8000800:	2b16      	cmp	r3, #22
 8000802:	d003      	beq.n	800080c <fsm_setting_run+0x20>
 8000804:	2b17      	cmp	r3, #23
 8000806:	f000 810d 	beq.w	8000a24 <fsm_setting_run+0x238>
				value = 1;
				clearAll_led();
			}
			break;
		default:
			break;
 800080a:	e184      	b.n	8000b16 <fsm_setting_run+0x32a>
			updateClockBuffer(value, 2);
 800080c:	4b78      	ldr	r3, [pc, #480]	@ (80009f0 <fsm_setting_run+0x204>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2102      	movs	r1, #2
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fbbe 	bl	8000f94 <updateClockBuffer>
			if(timer2_flag == 1){
 8000818:	4b76      	ldr	r3, [pc, #472]	@ (80009f4 <fsm_setting_run+0x208>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d113      	bne.n	8000848 <fsm_setting_run+0x5c>
				setTimer2(25);
 8000820:	2019      	movs	r0, #25
 8000822:	f000 febd 	bl	80015a0 <setTimer2>
				update7SEG(index_led);
 8000826:	4b74      	ldr	r3, [pc, #464]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fb28 	bl	8000e80 <update7SEG>
				index_led ++;
 8000830:	4b71      	ldr	r3, [pc, #452]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a70      	ldr	r2, [pc, #448]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000838:	6013      	str	r3, [r2, #0]
				if(index_led > 3){
 800083a:	4b6f      	ldr	r3, [pc, #444]	@ (80009f8 <fsm_setting_run+0x20c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b03      	cmp	r3, #3
 8000840:	dd02      	ble.n	8000848 <fsm_setting_run+0x5c>
					index_led = 0;
 8000842:	4b6d      	ldr	r3, [pc, #436]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
			if(timer1_flag == 1){
 8000848:	4b6c      	ldr	r3, [pc, #432]	@ (80009fc <fsm_setting_run+0x210>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d104      	bne.n	800085a <fsm_setting_run+0x6e>
				setTimer1(50);
 8000850:	2032      	movs	r0, #50	@ 0x32
 8000852:	f000 fe91 	bl	8001578 <setTimer1>
				led_red_blinking();
 8000856:	f001 f815 	bl	8001884 <led_red_blinking>
			if(isButtonPressed(1) == 1){
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fc76 	bl	800014c <isButtonPressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d104      	bne.n	8000870 <fsm_setting_run+0x84>
				value++;
 8000866:	4b62      	ldr	r3, [pc, #392]	@ (80009f0 <fsm_setting_run+0x204>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	4a60      	ldr	r2, [pc, #384]	@ (80009f0 <fsm_setting_run+0x204>)
 800086e:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 8000870:	2002      	movs	r0, #2
 8000872:	f7ff fc6b 	bl	800014c <isButtonPressed>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d132      	bne.n	80008e2 <fsm_setting_run+0xf6>
				max_r = value;
 800087c:	4b5c      	ldr	r3, [pc, #368]	@ (80009f0 <fsm_setting_run+0x204>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a5f      	ldr	r2, [pc, #380]	@ (8000a00 <fsm_setting_run+0x214>)
 8000882:	6013      	str	r3, [r2, #0]
				max_a = value*2/5;
 8000884:	4b5a      	ldr	r3, [pc, #360]	@ (80009f0 <fsm_setting_run+0x204>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4a5e      	ldr	r2, [pc, #376]	@ (8000a04 <fsm_setting_run+0x218>)
 800088c:	fb82 1203 	smull	r1, r2, r2, r3
 8000890:	1052      	asrs	r2, r2, #1
 8000892:	17db      	asrs	r3, r3, #31
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	4a5c      	ldr	r2, [pc, #368]	@ (8000a08 <fsm_setting_run+0x21c>)
 8000898:	6013      	str	r3, [r2, #0]
				max_g = max_r - max_a;
 800089a:	4b59      	ldr	r3, [pc, #356]	@ (8000a00 <fsm_setting_run+0x214>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b5a      	ldr	r3, [pc, #360]	@ (8000a08 <fsm_setting_run+0x21c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	4a59      	ldr	r2, [pc, #356]	@ (8000a0c <fsm_setting_run+0x220>)
 80008a6:	6013      	str	r3, [r2, #0]
				r = value;
 80008a8:	4b51      	ldr	r3, [pc, #324]	@ (80009f0 <fsm_setting_run+0x204>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a58      	ldr	r2, [pc, #352]	@ (8000a10 <fsm_setting_run+0x224>)
 80008ae:	6013      	str	r3, [r2, #0]
				a = max_a;
 80008b0:	4b55      	ldr	r3, [pc, #340]	@ (8000a08 <fsm_setting_run+0x21c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a57      	ldr	r2, [pc, #348]	@ (8000a14 <fsm_setting_run+0x228>)
 80008b6:	6013      	str	r3, [r2, #0]
				g = max_g;
 80008b8:	4b54      	ldr	r3, [pc, #336]	@ (8000a0c <fsm_setting_run+0x220>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a56      	ldr	r2, [pc, #344]	@ (8000a18 <fsm_setting_run+0x22c>)
 80008be:	6013      	str	r3, [r2, #0]
				jump1 = g * 100;
 80008c0:	4b55      	ldr	r3, [pc, #340]	@ (8000a18 <fsm_setting_run+0x22c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2264      	movs	r2, #100	@ 0x64
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	4a54      	ldr	r2, [pc, #336]	@ (8000a1c <fsm_setting_run+0x230>)
 80008cc:	6013      	str	r3, [r2, #0]
				jump2 = a * 100;
 80008ce:	4b51      	ldr	r3, [pc, #324]	@ (8000a14 <fsm_setting_run+0x228>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2264      	movs	r2, #100	@ 0x64
 80008d4:	fb02 f303 	mul.w	r3, r2, r3
 80008d8:	4a51      	ldr	r2, [pc, #324]	@ (8000a20 <fsm_setting_run+0x234>)
 80008da:	6013      	str	r3, [r2, #0]
				status = INIT;
 80008dc:	4b43      	ldr	r3, [pc, #268]	@ (80009ec <fsm_setting_run+0x200>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)== 1){
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fc32 	bl	800014c <isButtonPressed>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	f040 8115 	bne.w	8000b1a <fsm_setting_run+0x32e>
				status = SETTING_AMBER;
 80008f0:	4b3e      	ldr	r3, [pc, #248]	@ (80009ec <fsm_setting_run+0x200>)
 80008f2:	2218      	movs	r2, #24
 80008f4:	601a      	str	r2, [r3, #0]
				clearAll_led();
 80008f6:	f000 ff4f 	bl	8001798 <clearAll_led>
			break;
 80008fa:	e10e      	b.n	8000b1a <fsm_setting_run+0x32e>
			updateClockBuffer(value, 3);
 80008fc:	4b3c      	ldr	r3, [pc, #240]	@ (80009f0 <fsm_setting_run+0x204>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2103      	movs	r1, #3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fb46 	bl	8000f94 <updateClockBuffer>
			if(timer2_flag == 1){
 8000908:	4b3a      	ldr	r3, [pc, #232]	@ (80009f4 <fsm_setting_run+0x208>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d113      	bne.n	8000938 <fsm_setting_run+0x14c>
				setTimer2(25);
 8000910:	2019      	movs	r0, #25
 8000912:	f000 fe45 	bl	80015a0 <setTimer2>
				update7SEG(index_led);
 8000916:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fab0 	bl	8000e80 <update7SEG>
				index_led ++;
 8000920:	4b35      	ldr	r3, [pc, #212]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	4a34      	ldr	r2, [pc, #208]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000928:	6013      	str	r3, [r2, #0]
				if(index_led > 3){
 800092a:	4b33      	ldr	r3, [pc, #204]	@ (80009f8 <fsm_setting_run+0x20c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b03      	cmp	r3, #3
 8000930:	dd02      	ble.n	8000938 <fsm_setting_run+0x14c>
					index_led = 0;
 8000932:	4b31      	ldr	r3, [pc, #196]	@ (80009f8 <fsm_setting_run+0x20c>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
			if(timer1_flag == 1){
 8000938:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <fsm_setting_run+0x210>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d104      	bne.n	800094a <fsm_setting_run+0x15e>
				setTimer1(50);
 8000940:	2032      	movs	r0, #50	@ 0x32
 8000942:	f000 fe19 	bl	8001578 <setTimer1>
				led_amber_blinking();
 8000946:	f000 ffad 	bl	80018a4 <led_amber_blinking>
			if(isButtonPressed(1) == 1){
 800094a:	2001      	movs	r0, #1
 800094c:	f7ff fbfe 	bl	800014c <isButtonPressed>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d104      	bne.n	8000960 <fsm_setting_run+0x174>
				value++;
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <fsm_setting_run+0x204>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	4a24      	ldr	r2, [pc, #144]	@ (80009f0 <fsm_setting_run+0x204>)
 800095e:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff fbf3 	bl	800014c <isButtonPressed>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d132      	bne.n	80009d2 <fsm_setting_run+0x1e6>
				max_r = 5*value/2;
 800096c:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <fsm_setting_run+0x204>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4613      	mov	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	0fda      	lsrs	r2, r3, #31
 8000978:	4413      	add	r3, r2
 800097a:	105b      	asrs	r3, r3, #1
 800097c:	461a      	mov	r2, r3
 800097e:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <fsm_setting_run+0x214>)
 8000980:	601a      	str	r2, [r3, #0]
				max_a = value;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <fsm_setting_run+0x204>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a20      	ldr	r2, [pc, #128]	@ (8000a08 <fsm_setting_run+0x21c>)
 8000988:	6013      	str	r3, [r2, #0]
				max_g = max_r - max_a;
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <fsm_setting_run+0x214>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a08 <fsm_setting_run+0x21c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	4a1d      	ldr	r2, [pc, #116]	@ (8000a0c <fsm_setting_run+0x220>)
 8000996:	6013      	str	r3, [r2, #0]
				r = max_r;
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <fsm_setting_run+0x214>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <fsm_setting_run+0x224>)
 800099e:	6013      	str	r3, [r2, #0]
				a = value;
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <fsm_setting_run+0x204>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <fsm_setting_run+0x228>)
 80009a6:	6013      	str	r3, [r2, #0]
				g = max_g;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <fsm_setting_run+0x220>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000a18 <fsm_setting_run+0x22c>)
 80009ae:	6013      	str	r3, [r2, #0]
				jump1 = g * 100;
 80009b0:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <fsm_setting_run+0x22c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2264      	movs	r2, #100	@ 0x64
 80009b6:	fb02 f303 	mul.w	r3, r2, r3
 80009ba:	4a18      	ldr	r2, [pc, #96]	@ (8000a1c <fsm_setting_run+0x230>)
 80009bc:	6013      	str	r3, [r2, #0]
				jump2 = a * 100;
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <fsm_setting_run+0x228>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2264      	movs	r2, #100	@ 0x64
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <fsm_setting_run+0x234>)
 80009ca:	6013      	str	r3, [r2, #0]
				status = INIT;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <fsm_setting_run+0x200>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)== 1){
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fbba 	bl	800014c <isButtonPressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	f040 809f 	bne.w	8000b1e <fsm_setting_run+0x332>
				status = SETTING_GREEN;
 80009e0:	4b02      	ldr	r3, [pc, #8]	@ (80009ec <fsm_setting_run+0x200>)
 80009e2:	2217      	movs	r2, #23
 80009e4:	601a      	str	r2, [r3, #0]
				clearAll_led();
 80009e6:	f000 fed7 	bl	8001798 <clearAll_led>
			break;
 80009ea:	e098      	b.n	8000b1e <fsm_setting_run+0x332>
 80009ec:	20000034 	.word	0x20000034
 80009f0:	20000058 	.word	0x20000058
 80009f4:	20000160 	.word	0x20000160
 80009f8:	20000168 	.word	0x20000168
 80009fc:	2000015c 	.word	0x2000015c
 8000a00:	2000004c 	.word	0x2000004c
 8000a04:	66666667 	.word	0x66666667
 8000a08:	20000054 	.word	0x20000054
 8000a0c:	20000050 	.word	0x20000050
 8000a10:	20000038 	.word	0x20000038
 8000a14:	20000040 	.word	0x20000040
 8000a18:	2000003c 	.word	0x2000003c
 8000a1c:	20000044 	.word	0x20000044
 8000a20:	20000048 	.word	0x20000048
			updateClockBuffer(value, 4);
 8000a24:	4b40      	ldr	r3, [pc, #256]	@ (8000b28 <fsm_setting_run+0x33c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2104      	movs	r1, #4
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fab2 	bl	8000f94 <updateClockBuffer>
			if(timer2_flag == 1){
 8000a30:	4b3e      	ldr	r3, [pc, #248]	@ (8000b2c <fsm_setting_run+0x340>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d113      	bne.n	8000a60 <fsm_setting_run+0x274>
				setTimer2(25);
 8000a38:	2019      	movs	r0, #25
 8000a3a:	f000 fdb1 	bl	80015a0 <setTimer2>
				update7SEG(index_led);
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b30 <fsm_setting_run+0x344>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 fa1c 	bl	8000e80 <update7SEG>
				index_led ++;
 8000a48:	4b39      	ldr	r3, [pc, #228]	@ (8000b30 <fsm_setting_run+0x344>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a38      	ldr	r2, [pc, #224]	@ (8000b30 <fsm_setting_run+0x344>)
 8000a50:	6013      	str	r3, [r2, #0]
				if(index_led > 3){
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <fsm_setting_run+0x344>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	dd02      	ble.n	8000a60 <fsm_setting_run+0x274>
					index_led = 0;
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <fsm_setting_run+0x344>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
			if(timer1_flag == 1){
 8000a60:	4b34      	ldr	r3, [pc, #208]	@ (8000b34 <fsm_setting_run+0x348>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d104      	bne.n	8000a72 <fsm_setting_run+0x286>
				setTimer1(50);
 8000a68:	2032      	movs	r0, #50	@ 0x32
 8000a6a:	f000 fd85 	bl	8001578 <setTimer1>
				led_green_blinking();
 8000a6e:	f000 ff29 	bl	80018c4 <led_green_blinking>
			if(isButtonPressed(1) == 1){
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fb6a 	bl	800014c <isButtonPressed>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d104      	bne.n	8000a88 <fsm_setting_run+0x29c>
				value++;
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <fsm_setting_run+0x33c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a28      	ldr	r2, [pc, #160]	@ (8000b28 <fsm_setting_run+0x33c>)
 8000a86:	6013      	str	r3, [r2, #0]
			if(isButtonPressed(2) == 1){
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff fb5f 	bl	800014c <isButtonPressed>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d131      	bne.n	8000af8 <fsm_setting_run+0x30c>
				max_a = 2*value/3;
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <fsm_setting_run+0x33c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <fsm_setting_run+0x34c>)
 8000a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa0:	17db      	asrs	r3, r3, #31
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	4a25      	ldr	r2, [pc, #148]	@ (8000b3c <fsm_setting_run+0x350>)
 8000aa6:	6013      	str	r3, [r2, #0]
				max_g = value;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <fsm_setting_run+0x33c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a24      	ldr	r2, [pc, #144]	@ (8000b40 <fsm_setting_run+0x354>)
 8000aae:	6013      	str	r3, [r2, #0]
				max_r = max_a + max_g;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <fsm_setting_run+0x350>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <fsm_setting_run+0x354>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a22      	ldr	r2, [pc, #136]	@ (8000b44 <fsm_setting_run+0x358>)
 8000abc:	6013      	str	r3, [r2, #0]
				r = max_r;
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <fsm_setting_run+0x358>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a21      	ldr	r2, [pc, #132]	@ (8000b48 <fsm_setting_run+0x35c>)
 8000ac4:	6013      	str	r3, [r2, #0]
				a = max_a;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <fsm_setting_run+0x350>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a20      	ldr	r2, [pc, #128]	@ (8000b4c <fsm_setting_run+0x360>)
 8000acc:	6013      	str	r3, [r2, #0]
				g = value;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <fsm_setting_run+0x33c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b50 <fsm_setting_run+0x364>)
 8000ad4:	6013      	str	r3, [r2, #0]
				jump1 = g * 100;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <fsm_setting_run+0x364>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2264      	movs	r2, #100	@ 0x64
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b54 <fsm_setting_run+0x368>)
 8000ae2:	6013      	str	r3, [r2, #0]
				jump2 = a * 100;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <fsm_setting_run+0x360>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2264      	movs	r2, #100	@ 0x64
 8000aea:	fb02 f303 	mul.w	r3, r2, r3
 8000aee:	4a1a      	ldr	r2, [pc, #104]	@ (8000b58 <fsm_setting_run+0x36c>)
 8000af0:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <fsm_setting_run+0x370>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	601a      	str	r2, [r3, #0]
			if(isButtonPressed(0)== 1){
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff fb27 	bl	800014c <isButtonPressed>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d10e      	bne.n	8000b22 <fsm_setting_run+0x336>
				status = INIT;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <fsm_setting_run+0x370>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	601a      	str	r2, [r3, #0]
				value = 1;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <fsm_setting_run+0x33c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
				clearAll_led();
 8000b10:	f000 fe42 	bl	8001798 <clearAll_led>
			break;
 8000b14:	e005      	b.n	8000b22 <fsm_setting_run+0x336>
			break;
 8000b16:	bf00      	nop
 8000b18:	e004      	b.n	8000b24 <fsm_setting_run+0x338>
			break;
 8000b1a:	bf00      	nop
 8000b1c:	e002      	b.n	8000b24 <fsm_setting_run+0x338>
			break;
 8000b1e:	bf00      	nop
 8000b20:	e000      	b.n	8000b24 <fsm_setting_run+0x338>
			break;
 8000b22:	bf00      	nop
	}

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000058 	.word	0x20000058
 8000b2c:	20000160 	.word	0x20000160
 8000b30:	20000168 	.word	0x20000168
 8000b34:	2000015c 	.word	0x2000015c
 8000b38:	55555556 	.word	0x55555556
 8000b3c:	20000054 	.word	0x20000054
 8000b40:	20000050 	.word	0x20000050
 8000b44:	2000004c 	.word	0x2000004c
 8000b48:	20000038 	.word	0x20000038
 8000b4c:	20000040 	.word	0x20000040
 8000b50:	2000003c 	.word	0x2000003c
 8000b54:	20000044 	.word	0x20000044
 8000b58:	20000048 	.word	0x20000048
 8000b5c:	20000034 	.word	0x20000034

08000b60 <display7SEG>:
 */
#include "led7_segment.h"

int led_buffer[4];

void display7SEG(int num){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if(num==0){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d123      	bne.n	8000bb6 <display7SEG+0x56>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2101      	movs	r1, #1
 8000b72:	48c2      	ldr	r0, [pc, #776]	@ (8000e7c <display7SEG+0x31c>)
 8000b74:	f001 f9e1 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	48bf      	ldr	r0, [pc, #764]	@ (8000e7c <display7SEG+0x31c>)
 8000b7e:	f001 f9dc 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2104      	movs	r1, #4
 8000b86:	48bd      	ldr	r0, [pc, #756]	@ (8000e7c <display7SEG+0x31c>)
 8000b88:	f001 f9d7 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2108      	movs	r1, #8
 8000b90:	48ba      	ldr	r0, [pc, #744]	@ (8000e7c <display7SEG+0x31c>)
 8000b92:	f001 f9d2 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2110      	movs	r1, #16
 8000b9a:	48b8      	ldr	r0, [pc, #736]	@ (8000e7c <display7SEG+0x31c>)
 8000b9c:	f001 f9cd 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	48b5      	ldr	r0, [pc, #724]	@ (8000e7c <display7SEG+0x31c>)
 8000ba6:	f001 f9c8 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2140      	movs	r1, #64	@ 0x40
 8000bae:	48b3      	ldr	r0, [pc, #716]	@ (8000e7c <display7SEG+0x31c>)
 8000bb0:	f001 f9c3 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
		    }
	}
 8000bb4:	e15d      	b.n	8000e72 <display7SEG+0x312>
	else if(num==1){
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d123      	bne.n	8000c04 <display7SEG+0xa4>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	48ae      	ldr	r0, [pc, #696]	@ (8000e7c <display7SEG+0x31c>)
 8000bc2:	f001 f9ba 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2102      	movs	r1, #2
 8000bca:	48ac      	ldr	r0, [pc, #688]	@ (8000e7c <display7SEG+0x31c>)
 8000bcc:	f001 f9b5 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	48a9      	ldr	r0, [pc, #676]	@ (8000e7c <display7SEG+0x31c>)
 8000bd6:	f001 f9b0 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2108      	movs	r1, #8
 8000bde:	48a7      	ldr	r0, [pc, #668]	@ (8000e7c <display7SEG+0x31c>)
 8000be0:	f001 f9ab 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	48a4      	ldr	r0, [pc, #656]	@ (8000e7c <display7SEG+0x31c>)
 8000bea:	f001 f9a6 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2120      	movs	r1, #32
 8000bf2:	48a2      	ldr	r0, [pc, #648]	@ (8000e7c <display7SEG+0x31c>)
 8000bf4:	f001 f9a1 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2140      	movs	r1, #64	@ 0x40
 8000bfc:	489f      	ldr	r0, [pc, #636]	@ (8000e7c <display7SEG+0x31c>)
 8000bfe:	f001 f99c 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000c02:	e136      	b.n	8000e72 <display7SEG+0x312>
	else if(num==2){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d123      	bne.n	8000c52 <display7SEG+0xf2>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	489b      	ldr	r0, [pc, #620]	@ (8000e7c <display7SEG+0x31c>)
 8000c10:	f001 f993 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2102      	movs	r1, #2
 8000c18:	4898      	ldr	r0, [pc, #608]	@ (8000e7c <display7SEG+0x31c>)
 8000c1a:	f001 f98e 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2104      	movs	r1, #4
 8000c22:	4896      	ldr	r0, [pc, #600]	@ (8000e7c <display7SEG+0x31c>)
 8000c24:	f001 f989 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	4893      	ldr	r0, [pc, #588]	@ (8000e7c <display7SEG+0x31c>)
 8000c2e:	f001 f984 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2110      	movs	r1, #16
 8000c36:	4891      	ldr	r0, [pc, #580]	@ (8000e7c <display7SEG+0x31c>)
 8000c38:	f001 f97f 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	488e      	ldr	r0, [pc, #568]	@ (8000e7c <display7SEG+0x31c>)
 8000c42:	f001 f97a 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	488c      	ldr	r0, [pc, #560]	@ (8000e7c <display7SEG+0x31c>)
 8000c4c:	f001 f975 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000c50:	e10f      	b.n	8000e72 <display7SEG+0x312>
	else if(num==3){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d123      	bne.n	8000ca0 <display7SEG+0x140>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4887      	ldr	r0, [pc, #540]	@ (8000e7c <display7SEG+0x31c>)
 8000c5e:	f001 f96c 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2102      	movs	r1, #2
 8000c66:	4885      	ldr	r0, [pc, #532]	@ (8000e7c <display7SEG+0x31c>)
 8000c68:	f001 f967 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2104      	movs	r1, #4
 8000c70:	4882      	ldr	r0, [pc, #520]	@ (8000e7c <display7SEG+0x31c>)
 8000c72:	f001 f962 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2108      	movs	r1, #8
 8000c7a:	4880      	ldr	r0, [pc, #512]	@ (8000e7c <display7SEG+0x31c>)
 8000c7c:	f001 f95d 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	2110      	movs	r1, #16
 8000c84:	487d      	ldr	r0, [pc, #500]	@ (8000e7c <display7SEG+0x31c>)
 8000c86:	f001 f958 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	487b      	ldr	r0, [pc, #492]	@ (8000e7c <display7SEG+0x31c>)
 8000c90:	f001 f953 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2140      	movs	r1, #64	@ 0x40
 8000c98:	4878      	ldr	r0, [pc, #480]	@ (8000e7c <display7SEG+0x31c>)
 8000c9a:	f001 f94e 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000c9e:	e0e8      	b.n	8000e72 <display7SEG+0x312>
	else if(num==4){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d123      	bne.n	8000cee <display7SEG+0x18e>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4874      	ldr	r0, [pc, #464]	@ (8000e7c <display7SEG+0x31c>)
 8000cac:	f001 f945 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4871      	ldr	r0, [pc, #452]	@ (8000e7c <display7SEG+0x31c>)
 8000cb6:	f001 f940 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	486f      	ldr	r0, [pc, #444]	@ (8000e7c <display7SEG+0x31c>)
 8000cc0:	f001 f93b 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	486c      	ldr	r0, [pc, #432]	@ (8000e7c <display7SEG+0x31c>)
 8000cca:	f001 f936 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2110      	movs	r1, #16
 8000cd2:	486a      	ldr	r0, [pc, #424]	@ (8000e7c <display7SEG+0x31c>)
 8000cd4:	f001 f931 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4867      	ldr	r0, [pc, #412]	@ (8000e7c <display7SEG+0x31c>)
 8000cde:	f001 f92c 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2140      	movs	r1, #64	@ 0x40
 8000ce6:	4865      	ldr	r0, [pc, #404]	@ (8000e7c <display7SEG+0x31c>)
 8000ce8:	f001 f927 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000cec:	e0c1      	b.n	8000e72 <display7SEG+0x312>
	else if(num==5){
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b05      	cmp	r3, #5
 8000cf2:	d123      	bne.n	8000d3c <display7SEG+0x1dc>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4860      	ldr	r0, [pc, #384]	@ (8000e7c <display7SEG+0x31c>)
 8000cfa:	f001 f91e 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2102      	movs	r1, #2
 8000d02:	485e      	ldr	r0, [pc, #376]	@ (8000e7c <display7SEG+0x31c>)
 8000d04:	f001 f919 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	485b      	ldr	r0, [pc, #364]	@ (8000e7c <display7SEG+0x31c>)
 8000d0e:	f001 f914 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2108      	movs	r1, #8
 8000d16:	4859      	ldr	r0, [pc, #356]	@ (8000e7c <display7SEG+0x31c>)
 8000d18:	f001 f90f 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4856      	ldr	r0, [pc, #344]	@ (8000e7c <display7SEG+0x31c>)
 8000d22:	f001 f90a 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2120      	movs	r1, #32
 8000d2a:	4854      	ldr	r0, [pc, #336]	@ (8000e7c <display7SEG+0x31c>)
 8000d2c:	f001 f905 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2140      	movs	r1, #64	@ 0x40
 8000d34:	4851      	ldr	r0, [pc, #324]	@ (8000e7c <display7SEG+0x31c>)
 8000d36:	f001 f900 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000d3a:	e09a      	b.n	8000e72 <display7SEG+0x312>
	else if(num==6){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d123      	bne.n	8000d8a <display7SEG+0x22a>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2101      	movs	r1, #1
 8000d46:	484d      	ldr	r0, [pc, #308]	@ (8000e7c <display7SEG+0x31c>)
 8000d48:	f001 f8f7 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2102      	movs	r1, #2
 8000d50:	484a      	ldr	r0, [pc, #296]	@ (8000e7c <display7SEG+0x31c>)
 8000d52:	f001 f8f2 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2104      	movs	r1, #4
 8000d5a:	4848      	ldr	r0, [pc, #288]	@ (8000e7c <display7SEG+0x31c>)
 8000d5c:	f001 f8ed 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2108      	movs	r1, #8
 8000d64:	4845      	ldr	r0, [pc, #276]	@ (8000e7c <display7SEG+0x31c>)
 8000d66:	f001 f8e8 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2110      	movs	r1, #16
 8000d6e:	4843      	ldr	r0, [pc, #268]	@ (8000e7c <display7SEG+0x31c>)
 8000d70:	f001 f8e3 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	4840      	ldr	r0, [pc, #256]	@ (8000e7c <display7SEG+0x31c>)
 8000d7a:	f001 f8de 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2140      	movs	r1, #64	@ 0x40
 8000d82:	483e      	ldr	r0, [pc, #248]	@ (8000e7c <display7SEG+0x31c>)
 8000d84:	f001 f8d9 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000d88:	e073      	b.n	8000e72 <display7SEG+0x312>
	else if(num==7){
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b07      	cmp	r3, #7
 8000d8e:	d123      	bne.n	8000dd8 <display7SEG+0x278>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2101      	movs	r1, #1
 8000d94:	4839      	ldr	r0, [pc, #228]	@ (8000e7c <display7SEG+0x31c>)
 8000d96:	f001 f8d0 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4837      	ldr	r0, [pc, #220]	@ (8000e7c <display7SEG+0x31c>)
 8000da0:	f001 f8cb 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	4834      	ldr	r0, [pc, #208]	@ (8000e7c <display7SEG+0x31c>)
 8000daa:	f001 f8c6 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	4832      	ldr	r0, [pc, #200]	@ (8000e7c <display7SEG+0x31c>)
 8000db4:	f001 f8c1 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	482f      	ldr	r0, [pc, #188]	@ (8000e7c <display7SEG+0x31c>)
 8000dbe:	f001 f8bc 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	482d      	ldr	r0, [pc, #180]	@ (8000e7c <display7SEG+0x31c>)
 8000dc8:	f001 f8b7 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2140      	movs	r1, #64	@ 0x40
 8000dd0:	482a      	ldr	r0, [pc, #168]	@ (8000e7c <display7SEG+0x31c>)
 8000dd2:	f001 f8b2 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000dd6:	e04c      	b.n	8000e72 <display7SEG+0x312>
	else if(num==8){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d123      	bne.n	8000e26 <display7SEG+0x2c6>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4826      	ldr	r0, [pc, #152]	@ (8000e7c <display7SEG+0x31c>)
 8000de4:	f001 f8a9 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2102      	movs	r1, #2
 8000dec:	4823      	ldr	r0, [pc, #140]	@ (8000e7c <display7SEG+0x31c>)
 8000dee:	f001 f8a4 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2104      	movs	r1, #4
 8000df6:	4821      	ldr	r0, [pc, #132]	@ (8000e7c <display7SEG+0x31c>)
 8000df8:	f001 f89f 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2108      	movs	r1, #8
 8000e00:	481e      	ldr	r0, [pc, #120]	@ (8000e7c <display7SEG+0x31c>)
 8000e02:	f001 f89a 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	481c      	ldr	r0, [pc, #112]	@ (8000e7c <display7SEG+0x31c>)
 8000e0c:	f001 f895 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2120      	movs	r1, #32
 8000e14:	4819      	ldr	r0, [pc, #100]	@ (8000e7c <display7SEG+0x31c>)
 8000e16:	f001 f890 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2140      	movs	r1, #64	@ 0x40
 8000e1e:	4817      	ldr	r0, [pc, #92]	@ (8000e7c <display7SEG+0x31c>)
 8000e20:	f001 f88b 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000e24:	e025      	b.n	8000e72 <display7SEG+0x312>
	else if(num==9){
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	d122      	bne.n	8000e72 <display7SEG+0x312>
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4812      	ldr	r0, [pc, #72]	@ (8000e7c <display7SEG+0x31c>)
 8000e32:	f001 f882 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4810      	ldr	r0, [pc, #64]	@ (8000e7c <display7SEG+0x31c>)
 8000e3c:	f001 f87d 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2104      	movs	r1, #4
 8000e44:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <display7SEG+0x31c>)
 8000e46:	f001 f878 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <display7SEG+0x31c>)
 8000e50:	f001 f873 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2110      	movs	r1, #16
 8000e58:	4808      	ldr	r0, [pc, #32]	@ (8000e7c <display7SEG+0x31c>)
 8000e5a:	f001 f86e 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2120      	movs	r1, #32
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <display7SEG+0x31c>)
 8000e64:	f001 f869 	bl	8001f3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2140      	movs	r1, #64	@ 0x40
 8000e6c:	4803      	ldr	r0, [pc, #12]	@ (8000e7c <display7SEG+0x31c>)
 8000e6e:	f001 f864 	bl	8001f3a <HAL_GPIO_WritePin>
	}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <update7SEG>:
void update7SEG(int index) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    switch (index) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d87a      	bhi.n	8000f84 <update7SEG+0x104>
 8000e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e94 <update7SEG+0x14>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	08000edd 	.word	0x08000edd
 8000e9c:	08000f15 	.word	0x08000f15
 8000ea0:	08000f4d 	.word	0x08000f4d
        case 0:
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2140      	movs	r1, #64	@ 0x40
 8000ea8:	4838      	ldr	r0, [pc, #224]	@ (8000f8c <update7SEG+0x10c>)
 8000eaa:	f001 f846 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	4836      	ldr	r0, [pc, #216]	@ (8000f8c <update7SEG+0x10c>)
 8000eb4:	f001 f841 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ebe:	4833      	ldr	r0, [pc, #204]	@ (8000f8c <update7SEG+0x10c>)
 8000ec0:	f001 f83b 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eca:	4830      	ldr	r0, [pc, #192]	@ (8000f8c <update7SEG+0x10c>)
 8000ecc:	f001 f835 	bl	8001f3a <HAL_GPIO_WritePin>
            display7SEG(led_buffer[0]);
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f90 <update7SEG+0x110>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe43 	bl	8000b60 <display7SEG>
            break;
 8000eda:	e053      	b.n	8000f84 <update7SEG+0x104>
        case 1:
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2140      	movs	r1, #64	@ 0x40
 8000ee0:	482a      	ldr	r0, [pc, #168]	@ (8000f8c <update7SEG+0x10c>)
 8000ee2:	f001 f82a 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	4828      	ldr	r0, [pc, #160]	@ (8000f8c <update7SEG+0x10c>)
 8000eec:	f001 f825 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef6:	4825      	ldr	r0, [pc, #148]	@ (8000f8c <update7SEG+0x10c>)
 8000ef8:	f001 f81f 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f02:	4822      	ldr	r0, [pc, #136]	@ (8000f8c <update7SEG+0x10c>)
 8000f04:	f001 f819 	bl	8001f3a <HAL_GPIO_WritePin>
            display7SEG(led_buffer[1]);
 8000f08:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <update7SEG+0x110>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe27 	bl	8000b60 <display7SEG>
            break;
 8000f12:	e037      	b.n	8000f84 <update7SEG+0x104>
        case 2:
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2140      	movs	r1, #64	@ 0x40
 8000f18:	481c      	ldr	r0, [pc, #112]	@ (8000f8c <update7SEG+0x10c>)
 8000f1a:	f001 f80e 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <update7SEG+0x10c>)
 8000f24:	f001 f809 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2e:	4817      	ldr	r0, [pc, #92]	@ (8000f8c <update7SEG+0x10c>)
 8000f30:	f001 f803 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3a:	4814      	ldr	r0, [pc, #80]	@ (8000f8c <update7SEG+0x10c>)
 8000f3c:	f000 fffd 	bl	8001f3a <HAL_GPIO_WritePin>
            display7SEG(led_buffer[2]);
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <update7SEG+0x110>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe0b 	bl	8000b60 <display7SEG>
            break;
 8000f4a:	e01b      	b.n	8000f84 <update7SEG+0x104>
        case 3:
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2140      	movs	r1, #64	@ 0x40
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <update7SEG+0x10c>)
 8000f52:	f000 fff2 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2180      	movs	r1, #128	@ 0x80
 8000f5a:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <update7SEG+0x10c>)
 8000f5c:	f000 ffed 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <update7SEG+0x10c>)
 8000f68:	f000 ffe7 	bl	8001f3a <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <update7SEG+0x10c>)
 8000f74:	f000 ffe1 	bl	8001f3a <HAL_GPIO_WritePin>
            display7SEG(led_buffer[3]);
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <update7SEG+0x110>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fdef 	bl	8000b60 <display7SEG>
            break;
 8000f82:	bf00      	nop
    }
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010800 	.word	0x40010800
 8000f90:	20000090 	.word	0x20000090

08000f94 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <updateClockBuffer+0x70>)
 8000fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa6:	1092      	asrs	r2, r2, #2
 8000fa8:	17db      	asrs	r3, r3, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	4a16      	ldr	r2, [pc, #88]	@ (8001008 <updateClockBuffer+0x74>)
 8000fae:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num1 % 10;
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <updateClockBuffer+0x70>)
 8000fb4:	fb83 2301 	smull	r2, r3, r3, r1
 8000fb8:	109a      	asrs	r2, r3, #2
 8000fba:	17cb      	asrs	r3, r1, #31
 8000fbc:	1ad2      	subs	r2, r2, r3
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	1aca      	subs	r2, r1, r3
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <updateClockBuffer+0x74>)
 8000fca:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <updateClockBuffer+0x70>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1092      	asrs	r2, r2, #2
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <updateClockBuffer+0x74>)
 8000fdc:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num2 % 10;
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <updateClockBuffer+0x70>)
 8000fe2:	fb83 2301 	smull	r2, r3, r3, r1
 8000fe6:	109a      	asrs	r2, r3, #2
 8000fe8:	17cb      	asrs	r3, r1, #31
 8000fea:	1ad2      	subs	r2, r2, r3
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	1aca      	subs	r2, r1, r3
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <updateClockBuffer+0x74>)
 8000ff8:	60da      	str	r2, [r3, #12]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	66666667 	.word	0x66666667
 8001008:	20000090 	.word	0x20000090

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fc90 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f824 	bl	8001060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f000 f8aa 	bl	8001170 <MX_GPIO_Init>
  MX_TIM2_Init();
 800101c:	f000 f85c 	bl	80010d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001020:	480b      	ldr	r0, [pc, #44]	@ (8001050 <main+0x44>)
 8001022:	f001 fbe9 	bl	80027f8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  SCH_Init();
 8001026:	f000 f91b 	bl	8001260 <SCH_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_automatic_run, 0, 1) ;
 800102a:	2201      	movs	r2, #1
 800102c:	2100      	movs	r1, #0
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <main+0x48>)
 8001030:	f000 f92c 	bl	800128c <SCH_Add_Task>
  SCH_Add_Task(fsm_setting_run, 0, 1) ;
 8001034:	2201      	movs	r2, #1
 8001036:	2100      	movs	r1, #0
 8001038:	4807      	ldr	r0, [pc, #28]	@ (8001058 <main+0x4c>)
 800103a:	f000 f927 	bl	800128c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1) ;
 800103e:	2201      	movs	r2, #1
 8001040:	2100      	movs	r1, #0
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <main+0x50>)
 8001044:	f000 f922 	bl	800128c <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8001048:	f000 fa3c 	bl	80014c4 <SCH_Dispatch_Tasks>
 800104c:	e7fc      	b.n	8001048 <main+0x3c>
 800104e:	bf00      	nop
 8001050:	200000a0 	.word	0x200000a0
 8001054:	080002c5 	.word	0x080002c5
 8001058:	080007ed 	.word	0x080007ed
 800105c:	0800072d 	.word	0x0800072d

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b090      	sub	sp, #64	@ 0x40
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	2228      	movs	r2, #40	@ 0x28
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f001 ff4e 	bl	8002f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001086:	2301      	movs	r3, #1
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108a:	2310      	movs	r3, #16
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f000 ff80 	bl	8001f9c <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010a2:	f000 f8d7 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f9ee 	bl	80024a0 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ca:	f000 f8c3 	bl	8001254 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3740      	adds	r7, #64	@ 0x40
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <MX_TIM2_Init+0x94>)
 80010f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <MX_TIM2_Init+0x94>)
 80010fe:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001102:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b19      	ldr	r3, [pc, #100]	@ (800116c <MX_TIM2_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800110a:	4b18      	ldr	r3, [pc, #96]	@ (800116c <MX_TIM2_Init+0x94>)
 800110c:	2209      	movs	r2, #9
 800110e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b16      	ldr	r3, [pc, #88]	@ (800116c <MX_TIM2_Init+0x94>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_TIM2_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800111c:	4813      	ldr	r0, [pc, #76]	@ (800116c <MX_TIM2_Init+0x94>)
 800111e:	f001 fb1b 	bl	8002758 <HAL_TIM_Base_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001128:	f000 f894 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4619      	mov	r1, r3
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <MX_TIM2_Init+0x94>)
 800113a:	f001 fc99 	bl	8002a70 <HAL_TIM_ConfigClockSource>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001144:	f000 f886 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_TIM2_Init+0x94>)
 8001156:	f001 fe71 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001160:	f000 f878 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000a0 	.word	0x200000a0

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	4b29      	ldr	r3, [pc, #164]	@ (800122c <MX_GPIO_Init+0xbc>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a28      	ldr	r2, [pc, #160]	@ (800122c <MX_GPIO_Init+0xbc>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b26      	ldr	r3, [pc, #152]	@ (800122c <MX_GPIO_Init+0xbc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <MX_GPIO_Init+0xbc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a22      	ldr	r2, [pc, #136]	@ (800122c <MX_GPIO_Init+0xbc>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_GPIO_Init+0xbc>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80011b4:	2200      	movs	r2, #0
 80011b6:	f242 31e0 	movw	r1, #9184	@ 0x23e0
 80011ba:	481d      	ldr	r0, [pc, #116]	@ (8001230 <MX_GPIO_Init+0xc0>)
 80011bc:	f000 febd 	bl	8001f3a <HAL_GPIO_WritePin>
                          |EN3_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|LED4_Pin
 80011c0:	2200      	movs	r2, #0
 80011c2:	f641 61ff 	movw	r1, #7935	@ 0x1eff
 80011c6:	481b      	ldr	r0, [pc, #108]	@ (8001234 <MX_GPIO_Init+0xc4>)
 80011c8:	f000 feb7 	bl	8001f3a <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80011cc:	f242 33e0 	movw	r3, #9184	@ 0x23e0
 80011d0:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2302      	movs	r3, #2
 80011dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4619      	mov	r1, r3
 80011e4:	4812      	ldr	r0, [pc, #72]	@ (8001230 <MX_GPIO_Init+0xc0>)
 80011e6:	f000 fd15 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin LED4_Pin
                           LED5_Pin LED6_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG6_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|LED4_Pin
 80011ea:	f641 63ff 	movw	r3, #7935	@ 0x1eff
 80011ee:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG6_Pin|LED1_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4619      	mov	r1, r3
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <MX_GPIO_Init+0xc4>)
 8001204:	f000 fd06 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin;
 8001208:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800120c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4619      	mov	r1, r3
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_GPIO_Init+0xc0>)
 800121e:	f000 fcf9 	bl	8001c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40010800 	.word	0x40010800
 8001234:	40010c00 	.word	0x40010c00

08001238 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001240:	f000 f9d6 	bl	80015f0 <timerRun>
	SCH_Update();
 8001244:	f000 f8d0 	bl	80013e8 <SCH_Update>

	getKeyInput();
 8001248:	f7fe ff9a 	bl	8000180 <getKeyInput>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <Error_Handler+0x8>

08001260 <SCH_Init>:
 *      Author: ASUS
 */
#include "scheduler.h"
int counter;
sTask SCH_tasks_G[];
void SCH_Init(void){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001266:	2300      	movs	r3, #0
 8001268:	71fb      	strb	r3, [r7, #7]
 800126a:	e006      	b.n	800127a <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f85a 	bl	8001328 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	3301      	adds	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d9f5      	bls.n	800126c <SCH_Init+0xc>
	}
};
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <SCH_Add_Task>:
unsigned char SCH_Add_Task(void (* pFunction)() , unsigned int DELAY, unsigned int PERIOD){
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	/*Array_O(n)*/
	unsigned char Index = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	75fb      	strb	r3, [r7, #23]
	// First find a gap in the array (if there is one)
	while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 800129c:	e002      	b.n	80012a4 <SCH_Add_Task+0x18>
		Index++;
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	3301      	adds	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
	while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS)){
 80012a4:	7dfa      	ldrb	r2, [r7, #23]
 80012a6:	491f      	ldr	r1, [pc, #124]	@ (8001324 <SCH_Add_Task+0x98>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <SCH_Add_Task+0x32>
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d9ef      	bls.n	800129e <SCH_Add_Task+0x12>
	}
	 // Have we reached the end of the list?
	if (Index >= SCH_MAX_TASKS || Index < 0){
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d901      	bls.n	80012c8 <SCH_Add_Task+0x3c>
		// Task list is full
		return SCH_MAX_TASKS;
 80012c4:	2305      	movs	r3, #5
 80012c6:	e027      	b.n	8001318 <SCH_Add_Task+0x8c>
	}
	// If we’re here, there is a space in the task array
	SCH_tasks_G[Index].pTask = pFunction;
 80012c8:	7dfa      	ldrb	r2, [r7, #23]
 80012ca:	4916      	ldr	r1, [pc, #88]	@ (8001324 <SCH_Add_Task+0x98>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Delay = DELAY;
 80012da:	7dfa      	ldrb	r2, [r7, #23]
 80012dc:	4911      	ldr	r1, [pc, #68]	@ (8001324 <SCH_Add_Task+0x98>)
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3304      	adds	r3, #4
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].Period = PERIOD;
 80012ee:	7dfa      	ldrb	r2, [r7, #23]
 80012f0:	490c      	ldr	r1, [pc, #48]	@ (8001324 <SCH_Add_Task+0x98>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	3308      	adds	r3, #8
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[Index].RunMe = 0;
 8001302:	7dfa      	ldrb	r2, [r7, #23]
 8001304:	4907      	ldr	r1, [pc, #28]	@ (8001324 <SCH_Add_Task+0x98>)
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	330c      	adds	r3, #12
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
	// return position of task (to allow later deletion)
	return Index;
 8001316:	7dfb      	ldrb	r3, [r7, #23]
};
 8001318:	4618      	mov	r0, r3
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200000ec 	.word	0x200000ec

08001328 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const int TASK_INDEX){
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if(TASK_INDEX < 0 || TASK_INDEX > counter-1 || counter == 0){
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db08      	blt.n	8001348 <SCH_Delete_Task+0x20>
 8001336:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <SCH_Delete_Task+0xb8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	da03      	bge.n	8001348 <SCH_Delete_Task+0x20>
 8001340:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <SCH_Delete_Task+0xb8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <SCH_Delete_Task+0x28>
		return counter;
 8001348:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <SCH_Delete_Task+0xb8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	e041      	b.n	80013d4 <SCH_Delete_Task+0xac>
	}
	else{
		if(counter == 1){
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <SCH_Delete_Task+0xb8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d110      	bne.n	800137a <SCH_Delete_Task+0x52>
			SCH_tasks_G[0].pTask = 0x0000;
 8001358:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[0].Delay = 0;
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]
			SCH_tasks_G[0].Period = 0;
 8001364:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
			SCH_tasks_G[0].RunMe = 0;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 800136c:	2200      	movs	r2, #0
 800136e:	731a      	strb	r2, [r3, #12]
			counter = 0;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <SCH_Delete_Task+0xb8>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
			return 1;
 8001376:	2301      	movs	r3, #1
 8001378:	e02c      	b.n	80013d4 <SCH_Delete_Task+0xac>
		}
		else{
			SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 800137a:	491a      	ldr	r1, [pc, #104]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[TASK_INDEX].Delay = 0;
 800138c:	4915      	ldr	r1, [pc, #84]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	3304      	adds	r3, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[TASK_INDEX].Period = 0;
 80013a0:	4910      	ldr	r1, [pc, #64]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	3308      	adds	r3, #8
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[TASK_INDEX].RunMe = 0;
 80013b4:	490b      	ldr	r1, [pc, #44]	@ (80013e4 <SCH_Delete_Task+0xbc>)
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	330c      	adds	r3, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
			counter--;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <SCH_Delete_Task+0xb8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <SCH_Delete_Task+0xb8>)
 80013d0:	6013      	str	r3, [r2, #0]
			return 1;
 80013d2:	2301      	movs	r3, #1
		}
	}
};
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	200000e8 	.word	0x200000e8
 80013e4:	200000ec 	.word	0x200000ec

080013e8 <SCH_Update>:
void SCH_Update(void){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
	unsigned char Index;
	//NOTE: calculations are in *TICKS* (not milliseconds)
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	e05b      	b.n	80014ac <SCH_Update+0xc4>
		// Check if there is a task at this location
		if(SCH_tasks_G[Index].pTask){
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4932      	ldr	r1, [pc, #200]	@ (80014c0 <SCH_Update+0xd8>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d04e      	beq.n	80014a6 <SCH_Update+0xbe>
			if(SCH_tasks_G[Index].Delay == 0){
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	492d      	ldr	r1, [pc, #180]	@ (80014c0 <SCH_Update+0xd8>)
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3304      	adds	r3, #4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d131      	bne.n	8001482 <SCH_Update+0x9a>
				// The task is due to run
				// Inc. the ’RunMe’ flag
				SCH_tasks_G[Index].RunMe++;
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	4927      	ldr	r1, [pc, #156]	@ (80014c0 <SCH_Update+0xd8>)
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	330c      	adds	r3, #12
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	4922      	ldr	r1, [pc, #136]	@ (80014c0 <SCH_Update+0xd8>)
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	330c      	adds	r3, #12
 8001442:	4602      	mov	r2, r0
 8001444:	701a      	strb	r2, [r3, #0]

				if(SCH_tasks_G[Index].Period){
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	491d      	ldr	r1, [pc, #116]	@ (80014c0 <SCH_Update+0xd8>)
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	3308      	adds	r3, #8
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d024      	beq.n	80014a6 <SCH_Update+0xbe>
					// Schedule periodic tasks to run again
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 800145c:	79f9      	ldrb	r1, [r7, #7]
 800145e:	79fa      	ldrb	r2, [r7, #7]
 8001460:	4817      	ldr	r0, [pc, #92]	@ (80014c0 <SCH_Update+0xd8>)
 8001462:	460b      	mov	r3, r1
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4403      	add	r3, r0
 800146c:	3308      	adds	r3, #8
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <SCH_Update+0xd8>)
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4403      	add	r3, r0
 800147c:	3304      	adds	r3, #4
 800147e:	6019      	str	r1, [r3, #0]
 8001480:	e011      	b.n	80014a6 <SCH_Update+0xbe>
				}
			}
			else{
				// Not yet ready to run: just decrement the delay
				SCH_tasks_G[Index].Delay--;
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	490e      	ldr	r1, [pc, #56]	@ (80014c0 <SCH_Update+0xd8>)
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	440b      	add	r3, r1
 8001490:	3304      	adds	r3, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1e59      	subs	r1, r3, #1
 8001496:	480a      	ldr	r0, [pc, #40]	@ (80014c0 <SCH_Update+0xd8>)
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4403      	add	r3, r0
 80014a2:	3304      	adds	r3, #4
 80014a4:	6019      	str	r1, [r3, #0]
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	3301      	adds	r3, #1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d9a0      	bls.n	80013f4 <SCH_Update+0xc>
			}
		}
	}
};
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200000ec 	.word	0x200000ec

080014c4 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
	/*Array_O(n)*/
	unsigned char Index;
	// Dispatches (runs) the next task (if one is ready)
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	e049      	b.n	8001564 <SCH_Dispatch_Tasks+0xa0>
		if(SCH_tasks_G[Index].RunMe > 0) {
 80014d0:	7dfa      	ldrb	r2, [r7, #23]
 80014d2:	4928      	ldr	r1, [pc, #160]	@ (8001574 <SCH_Dispatch_Tasks+0xb0>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	330c      	adds	r3, #12
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03b      	beq.n	800155e <SCH_Dispatch_Tasks+0x9a>
			(*SCH_tasks_G[Index].pTask)(); // Run the task
 80014e6:	7dfa      	ldrb	r2, [r7, #23]
 80014e8:	4922      	ldr	r1, [pc, #136]	@ (8001574 <SCH_Dispatch_Tasks+0xb0>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe--; // Reset / reduceRunMe flag
 80014f8:	7dfa      	ldrb	r2, [r7, #23]
 80014fa:	491e      	ldr	r1, [pc, #120]	@ (8001574 <SCH_Dispatch_Tasks+0xb0>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	330c      	adds	r3, #12
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	b2d8      	uxtb	r0, r3
 800150e:	4919      	ldr	r1, [pc, #100]	@ (8001574 <SCH_Dispatch_Tasks+0xb0>)
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	330c      	adds	r3, #12
 800151c:	4602      	mov	r2, r0
 800151e:	701a      	strb	r2, [r3, #0]
			// Periodic tasks will automatically run again
			// − if this is a ’one shot’ task, remove it from the array
			if (SCH_tasks_G[Index].Period == 0){
 8001520:	7dfa      	ldrb	r2, [r7, #23]
 8001522:	4914      	ldr	r1, [pc, #80]	@ (8001574 <SCH_Dispatch_Tasks+0xb0>)
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	3308      	adds	r3, #8
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d104      	bne.n	8001540 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete_Task(Index);
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fef5 	bl	8001328 <SCH_Delete_Task>
 800153e:	e00e      	b.n	800155e <SCH_Dispatch_Tasks+0x9a>
			}
			else{
				 sTask temp;
				 temp.Period = SCH_tasks_G[0].Period;
 8001540:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <SCH_Dispatch_Tasks+0xb0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	60bb      	str	r3, [r7, #8]
				 temp.pTask = SCH_tasks_G[0].pTask;
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <SCH_Dispatch_Tasks+0xb0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	603b      	str	r3, [r7, #0]
				 SCH_Delete_Task(0);
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff feeb 	bl	8001328 <SCH_Delete_Task>
				 SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe97 	bl	800128c <SCH_Add_Task>
	for(Index = 0; Index < SCH_MAX_TASKS; Index++){
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	3301      	adds	r3, #1
 8001562:	75fb      	strb	r3, [r7, #23]
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b04      	cmp	r3, #4
 8001568:	d9b2      	bls.n	80014d0 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
};
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000ec 	.word	0x200000ec

08001578 <setTimer1>:
int timer3_counter = 0;
int timer1_flag = 0;
int timer2_flag = 0;
int timer3_flag = 0;
int index_led = 0;
void setTimer1(int duration){
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001580:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <setTimer1+0x20>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <setTimer1+0x24>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000150 	.word	0x20000150
 800159c:	2000015c 	.word	0x2000015c

080015a0 <setTimer2>:
void setTimer2(int duration){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80015a8:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <setTimer2+0x20>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <setTimer2+0x24>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000154 	.word	0x20000154
 80015c4:	20000160 	.word	0x20000160

080015c8 <setTimer3>:

void setTimer3(int duration){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80015d0:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <setTimer3+0x20>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <setTimer3+0x24>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000158 	.word	0x20000158
 80015ec:	20000164 	.word	0x20000164

080015f0 <timerRun>:
void timerRun(){
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <timerRun+0x6c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	dd0b      	ble.n	8001614 <timerRun+0x24>
		timer1_counter--;
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <timerRun+0x6c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a16      	ldr	r2, [pc, #88]	@ (800165c <timerRun+0x6c>)
 8001604:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <timerRun+0x6c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dc02      	bgt.n	8001614 <timerRun+0x24>
				timer1_flag = 1;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <timerRun+0x70>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <timerRun+0x74>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	dd0b      	ble.n	8001634 <timerRun+0x44>
			timer2_counter--;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <timerRun+0x74>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	4a10      	ldr	r2, [pc, #64]	@ (8001664 <timerRun+0x74>)
 8001624:	6013      	str	r3, [r2, #0]
			if(timer2_counter <= 0){
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <timerRun+0x74>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	dc02      	bgt.n	8001634 <timerRun+0x44>
					timer2_flag = 1;
 800162e:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <timerRun+0x78>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]
			}
		}

	if(timer3_counter > 0){
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <timerRun+0x7c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	dd0b      	ble.n	8001654 <timerRun+0x64>
		timer3_counter--;
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <timerRun+0x7c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3b01      	subs	r3, #1
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <timerRun+0x7c>)
 8001644:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <timerRun+0x7c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	dc02      	bgt.n	8001654 <timerRun+0x64>
				timer3_flag = 1;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <timerRun+0x80>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
		}
	}


}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	20000150 	.word	0x20000150
 8001660:	2000015c 	.word	0x2000015c
 8001664:	20000154 	.word	0x20000154
 8001668:	20000160 	.word	0x20000160
 800166c:	20000158 	.word	0x20000158
 8001670:	20000164 	.word	0x20000164

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_MspInit+0x5c>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6193      	str	r3, [r2, #24]
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <HAL_MspInit+0x5c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <HAL_MspInit+0x5c>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_MspInit+0x60>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4a04      	ldr	r2, [pc, #16]	@ (80016d4 <HAL_MspInit+0x60>)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010000 	.word	0x40010000

080016d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e8:	d113      	bne.n	8001712 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <HAL_TIM_Base_MspInit+0x44>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <HAL_TIM_Base_MspInit+0x44>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_TIM_Base_MspInit+0x44>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	201c      	movs	r0, #28
 8001708:	f000 fa4d 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800170c:	201c      	movs	r0, #28
 800170e:	f000 fa66 	bl	8001bde <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f926 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <TIM2_IRQHandler+0x10>)
 800177e:	f001 f887 	bl	8002890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000a0 	.word	0x200000a0

0800178c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <clearAll_led>:
 *
 *  Created on: Nov 30, 2024
 *      Author: ASUS
 */
#include "traffic_light.h"
void clearAll_led(){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	4811      	ldr	r0, [pc, #68]	@ (80017e8 <clearAll_led+0x50>)
 80017a2:	f000 fbca 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017ac:	480f      	ldr	r0, [pc, #60]	@ (80017ec <clearAll_led+0x54>)
 80017ae:	f000 fbc4 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017b8:	480b      	ldr	r0, [pc, #44]	@ (80017e8 <clearAll_led+0x50>)
 80017ba:	f000 fbbe 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017c4:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <clearAll_led+0x50>)
 80017c6:	f000 fbb8 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <clearAll_led+0x50>)
 80017d2:	f000 fbb2 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <clearAll_led+0x50>)
 80017de:	f000 fbac 	bl	8001f3a <HAL_GPIO_WritePin>

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40010800 	.word	0x40010800

080017f0 <led_green_red>:
void led_green_red(){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017fa:	4805      	ldr	r0, [pc, #20]	@ (8001810 <led_green_red+0x20>)
 80017fc:	f000 fb9d 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001806:	4803      	ldr	r0, [pc, #12]	@ (8001814 <led_green_red+0x24>)
 8001808:	f000 fb97 	bl	8001f3a <HAL_GPIO_WritePin>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00

08001818 <led_amber_red>:

void led_amber_red(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <led_amber_red+0x20>)
 8001824:	f000 fb89 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800182e:	4802      	ldr	r0, [pc, #8]	@ (8001838 <led_amber_red+0x20>)
 8001830:	f000 fb83 	bl	8001f3a <HAL_GPIO_WritePin>

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010c00 	.word	0x40010c00

0800183c <led_red_green>:

void led_red_green(){
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8001840:	2201      	movs	r2, #1
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <led_red_green+0x20>)
 8001846:	f000 fb78 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, SET);
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <led_red_green+0x20>)
 8001852:	f000 fb72 	bl	8001f3a <HAL_GPIO_WritePin>

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40010c00 	.word	0x40010c00

08001860 <led_red_amber>:

void led_red_amber(){
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	4805      	ldr	r0, [pc, #20]	@ (8001880 <led_red_amber+0x20>)
 800186a:	f000 fb66 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <led_red_amber+0x20>)
 8001876:	f000 fb60 	bl	8001f3a <HAL_GPIO_WritePin>

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40010c00 	.word	0x40010c00

08001884 <led_red_blinking>:
void led_red_blinking(){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001888:	2180      	movs	r1, #128	@ 0x80
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <led_red_blinking+0x1c>)
 800188c:	f000 fb6d 	bl	8001f6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8001890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <led_red_blinking+0x1c>)
 8001896:	f000 fb68 	bl	8001f6a <HAL_GPIO_TogglePin>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40010c00 	.word	0x40010c00

080018a4 <led_amber_blinking>:

void led_amber_blinking(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ac:	4804      	ldr	r0, [pc, #16]	@ (80018c0 <led_amber_blinking+0x1c>)
 80018ae:	f000 fb5c 	bl	8001f6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80018b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018b6:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <led_amber_blinking+0x1c>)
 80018b8:	f000 fb57 	bl	8001f6a <HAL_GPIO_TogglePin>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40010c00 	.word	0x40010c00

080018c4 <led_green_blinking>:

void led_green_blinking(){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80018c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018cc:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <led_green_blinking+0x1c>)
 80018ce:	f000 fb4c 	bl	8001f6a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 80018d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018d6:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <led_green_blinking+0x20>)
 80018d8:	f000 fb47 	bl	8001f6a <HAL_GPIO_TogglePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40010c00 	.word	0x40010c00

080018e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018e8:	f7ff ff50 	bl	800178c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480b      	ldr	r0, [pc, #44]	@ (800191c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ee:	490c      	ldr	r1, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001904:	4c09      	ldr	r4, [pc, #36]	@ (800192c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f001 fb05 	bl	8002f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001916:	f7ff fb79 	bl	800100c <main>
  bx lr
 800191a:	4770      	bx	lr
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001924:	08002fac 	.word	0x08002fac
  ldr r2, =_sbss
 8001928:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800192c:	20000170 	.word	0x20000170

08001930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC1_2_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <HAL_Init+0x28>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a07      	ldr	r2, [pc, #28]	@ (800195c <HAL_Init+0x28>)
 800193e:	f043 0310 	orr.w	r3, r3, #16
 8001942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f000 f923 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194a:	200f      	movs	r0, #15
 800194c:	f000 f808 	bl	8001960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001950:	f7ff fe90 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_InitTick+0x54>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_InitTick+0x58>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f93b 	bl	8001bfa <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f903 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	@ (80019bc <HAL_InitTick+0x5c>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	2000005c 	.word	0x2000005c
 80019b8:	20000064 	.word	0x20000064
 80019bc:	20000060 	.word	0x20000060

080019c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_IncTick+0x1c>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_IncTick+0x20>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a03      	ldr	r2, [pc, #12]	@ (80019e0 <HAL_IncTick+0x20>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000064 	.word	0x20000064
 80019e0:	2000016c 	.word	0x2000016c

080019e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b02      	ldr	r3, [pc, #8]	@ (80019f4 <HAL_GetTick+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	2000016c 	.word	0x2000016c

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	@ (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	60d3      	str	r3, [r2, #12]
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4906      	ldr	r1, [pc, #24]	@ (8001a90 <__NVIC_EnableIRQ+0x34>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff90 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff2d 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff42 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff90 	bl	8001ae8 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5f 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff35 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b08b      	sub	sp, #44	@ 0x2c
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	e161      	b.n	8001eec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 8150 	bne.w	8001ee6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4a97      	ldr	r2, [pc, #604]	@ (8001ea8 <HAL_GPIO_Init+0x294>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d05e      	beq.n	8001d0e <HAL_GPIO_Init+0xfa>
 8001c50:	4a95      	ldr	r2, [pc, #596]	@ (8001ea8 <HAL_GPIO_Init+0x294>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d875      	bhi.n	8001d42 <HAL_GPIO_Init+0x12e>
 8001c56:	4a95      	ldr	r2, [pc, #596]	@ (8001eac <HAL_GPIO_Init+0x298>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d058      	beq.n	8001d0e <HAL_GPIO_Init+0xfa>
 8001c5c:	4a93      	ldr	r2, [pc, #588]	@ (8001eac <HAL_GPIO_Init+0x298>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d86f      	bhi.n	8001d42 <HAL_GPIO_Init+0x12e>
 8001c62:	4a93      	ldr	r2, [pc, #588]	@ (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d052      	beq.n	8001d0e <HAL_GPIO_Init+0xfa>
 8001c68:	4a91      	ldr	r2, [pc, #580]	@ (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d869      	bhi.n	8001d42 <HAL_GPIO_Init+0x12e>
 8001c6e:	4a91      	ldr	r2, [pc, #580]	@ (8001eb4 <HAL_GPIO_Init+0x2a0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d04c      	beq.n	8001d0e <HAL_GPIO_Init+0xfa>
 8001c74:	4a8f      	ldr	r2, [pc, #572]	@ (8001eb4 <HAL_GPIO_Init+0x2a0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d863      	bhi.n	8001d42 <HAL_GPIO_Init+0x12e>
 8001c7a:	4a8f      	ldr	r2, [pc, #572]	@ (8001eb8 <HAL_GPIO_Init+0x2a4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d046      	beq.n	8001d0e <HAL_GPIO_Init+0xfa>
 8001c80:	4a8d      	ldr	r2, [pc, #564]	@ (8001eb8 <HAL_GPIO_Init+0x2a4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d85d      	bhi.n	8001d42 <HAL_GPIO_Init+0x12e>
 8001c86:	2b12      	cmp	r3, #18
 8001c88:	d82a      	bhi.n	8001ce0 <HAL_GPIO_Init+0xcc>
 8001c8a:	2b12      	cmp	r3, #18
 8001c8c:	d859      	bhi.n	8001d42 <HAL_GPIO_Init+0x12e>
 8001c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c94 <HAL_GPIO_Init+0x80>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001d0f 	.word	0x08001d0f
 8001c98:	08001ce9 	.word	0x08001ce9
 8001c9c:	08001cfb 	.word	0x08001cfb
 8001ca0:	08001d3d 	.word	0x08001d3d
 8001ca4:	08001d43 	.word	0x08001d43
 8001ca8:	08001d43 	.word	0x08001d43
 8001cac:	08001d43 	.word	0x08001d43
 8001cb0:	08001d43 	.word	0x08001d43
 8001cb4:	08001d43 	.word	0x08001d43
 8001cb8:	08001d43 	.word	0x08001d43
 8001cbc:	08001d43 	.word	0x08001d43
 8001cc0:	08001d43 	.word	0x08001d43
 8001cc4:	08001d43 	.word	0x08001d43
 8001cc8:	08001d43 	.word	0x08001d43
 8001ccc:	08001d43 	.word	0x08001d43
 8001cd0:	08001d43 	.word	0x08001d43
 8001cd4:	08001d43 	.word	0x08001d43
 8001cd8:	08001cf1 	.word	0x08001cf1
 8001cdc:	08001d05 	.word	0x08001d05
 8001ce0:	4a76      	ldr	r2, [pc, #472]	@ (8001ebc <HAL_GPIO_Init+0x2a8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ce6:	e02c      	b.n	8001d42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	623b      	str	r3, [r7, #32]
          break;
 8001cee:	e029      	b.n	8001d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	623b      	str	r3, [r7, #32]
          break;
 8001cf8:	e024      	b.n	8001d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	3308      	adds	r3, #8
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e01f      	b.n	8001d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e01a      	b.n	8001d44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d16:	2304      	movs	r3, #4
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e013      	b.n	8001d44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d24:	2308      	movs	r3, #8
 8001d26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	611a      	str	r2, [r3, #16]
          break;
 8001d2e:	e009      	b.n	8001d44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d30:	2308      	movs	r3, #8
 8001d32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	615a      	str	r2, [r3, #20]
          break;
 8001d3a:	e003      	b.n	8001d44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	623b      	str	r3, [r7, #32]
          break;
 8001d40:	e000      	b.n	8001d44 <HAL_GPIO_Init+0x130>
          break;
 8001d42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2bff      	cmp	r3, #255	@ 0xff
 8001d48:	d801      	bhi.n	8001d4e <HAL_GPIO_Init+0x13a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	e001      	b.n	8001d52 <HAL_GPIO_Init+0x13e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3304      	adds	r3, #4
 8001d52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2bff      	cmp	r3, #255	@ 0xff
 8001d58:	d802      	bhi.n	8001d60 <HAL_GPIO_Init+0x14c>
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x152>
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	3b08      	subs	r3, #8
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	401a      	ands	r2, r3
 8001d78:	6a39      	ldr	r1, [r7, #32]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 80a9 	beq.w	8001ee6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d94:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec0 <HAL_GPIO_Init+0x2ac>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a49      	ldr	r2, [pc, #292]	@ (8001ec0 <HAL_GPIO_Init+0x2ac>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b47      	ldr	r3, [pc, #284]	@ (8001ec0 <HAL_GPIO_Init+0x2ac>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dac:	4a45      	ldr	r2, [pc, #276]	@ (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec8 <HAL_GPIO_Init+0x2b4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00d      	beq.n	8001df4 <HAL_GPIO_Init+0x1e0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3c      	ldr	r2, [pc, #240]	@ (8001ecc <HAL_GPIO_Init+0x2b8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d007      	beq.n	8001df0 <HAL_GPIO_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed0 <HAL_GPIO_Init+0x2bc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d101      	bne.n	8001dec <HAL_GPIO_Init+0x1d8>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001df4:	2300      	movs	r3, #0
 8001df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e06:	492f      	ldr	r1, [pc, #188]	@ (8001ec4 <HAL_GPIO_Init+0x2b0>)
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e20:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	492b      	ldr	r1, [pc, #172]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4927      	ldr	r1, [pc, #156]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e48:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4921      	ldr	r1, [pc, #132]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e56:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	491d      	ldr	r1, [pc, #116]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4917      	ldr	r1, [pc, #92]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e006      	b.n	8001e8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4913      	ldr	r1, [pc, #76]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01f      	beq.n	8001ed8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <HAL_GPIO_Init+0x2c0>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	600b      	str	r3, [r1, #0]
 8001ea4:	e01f      	b.n	8001ee6 <HAL_GPIO_Init+0x2d2>
 8001ea6:	bf00      	nop
 8001ea8:	10320000 	.word	0x10320000
 8001eac:	10310000 	.word	0x10310000
 8001eb0:	10220000 	.word	0x10220000
 8001eb4:	10210000 	.word	0x10210000
 8001eb8:	10120000 	.word	0x10120000
 8001ebc:	10110000 	.word	0x10110000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	40010c00 	.word	0x40010c00
 8001ed0:	40011000 	.word	0x40011000
 8001ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_GPIO_Init+0x2f4>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4909      	ldr	r1, [pc, #36]	@ (8001f08 <HAL_GPIO_Init+0x2f4>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f47f ae96 	bne.w	8001c28 <HAL_GPIO_Init+0x14>
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	372c      	adds	r7, #44	@ 0x2c
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	807b      	strh	r3, [r7, #2]
 8001f46:	4613      	mov	r3, r2
 8001f48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4a:	787b      	ldrb	r3, [r7, #1]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f50:	887a      	ldrh	r2, [r7, #2]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f56:	e003      	b.n	8001f60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	611a      	str	r2, [r3, #16]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f7c:	887a      	ldrh	r2, [r7, #2]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	041a      	lsls	r2, r3, #16
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43d9      	mvns	r1, r3
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e272      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fbc:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d112      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5e>
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe0:	d10b      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe2:	4b89      	ldr	r3, [pc, #548]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d06c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x12c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d168      	bne.n	80020c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e24c      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x76>
 8002004:	4b80      	ldr	r3, [pc, #512]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a7f      	ldr	r2, [pc, #508]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e02e      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x98>
 800201a:	4b7b      	ldr	r3, [pc, #492]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a7a      	ldr	r2, [pc, #488]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b78      	ldr	r3, [pc, #480]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a77      	ldr	r2, [pc, #476]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0xbc>
 800203e:	4b72      	ldr	r3, [pc, #456]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a71      	ldr	r2, [pc, #452]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b6f      	ldr	r3, [pc, #444]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6e      	ldr	r2, [pc, #440]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0xd4>
 8002058:	4b6b      	ldr	r3, [pc, #428]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6a      	ldr	r2, [pc, #424]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a67      	ldr	r2, [pc, #412]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800206e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fcb4 	bl	80019e4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff fcb0 	bl	80019e4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	@ 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e200      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b5d      	ldr	r3, [pc, #372]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0xe4>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fca0 	bl	80019e4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff fc9c 	bl	80019e4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	@ 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1ec      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x10c>
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d063      	beq.n	800219e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020e2:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d11c      	bne.n	8002128 <HAL_RCC_OscConfig+0x18c>
 80020ee:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x176>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e1c0      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4939      	ldr	r1, [pc, #228]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	e03a      	b.n	800219e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b36      	ldr	r3, [pc, #216]	@ (800220c <HAL_RCC_OscConfig+0x270>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002136:	f7ff fc55 	bl	80019e4 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213e:	f7ff fc51 	bl	80019e4 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1a1      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	4b2d      	ldr	r3, [pc, #180]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	4b2a      	ldr	r3, [pc, #168]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4927      	ldr	r1, [pc, #156]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e015      	b.n	800219e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002172:	4b26      	ldr	r3, [pc, #152]	@ (800220c <HAL_RCC_OscConfig+0x270>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fc34 	bl	80019e4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002180:	f7ff fc30 	bl	80019e4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e180      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03a      	beq.n	8002220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d019      	beq.n	80021e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b2:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_RCC_OscConfig+0x274>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7ff fc14 	bl	80019e4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7ff fc10 	bl	80019e4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e160      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021de:	2001      	movs	r0, #1
 80021e0:	f000 fa9c 	bl	800271c <RCC_Delay>
 80021e4:	e01c      	b.n	8002220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_RCC_OscConfig+0x274>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7ff fbfa 	bl	80019e4 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f2:	e00f      	b.n	8002214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff fbf6 	bl	80019e4 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d908      	bls.n	8002214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e146      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000
 800220c:	42420000 	.word	0x42420000
 8002210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b92      	ldr	r3, [pc, #584]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e9      	bne.n	80021f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a6 	beq.w	800237a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4b8b      	ldr	r3, [pc, #556]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10d      	bne.n	800225a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b88      	ldr	r3, [pc, #544]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a87      	ldr	r2, [pc, #540]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	61d3      	str	r3, [r2, #28]
 800224a:	4b85      	ldr	r3, [pc, #532]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002256:	2301      	movs	r3, #1
 8002258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b82      	ldr	r3, [pc, #520]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002266:	4b7f      	ldr	r3, [pc, #508]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7e      	ldr	r2, [pc, #504]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002272:	f7ff fbb7 	bl	80019e4 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7ff fbb3 	bl	80019e4 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b64      	cmp	r3, #100	@ 0x64
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e103      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b75      	ldr	r3, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x4c8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x312>
 80022a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	e02d      	b.n	800230a <HAL_RCC_OscConfig+0x36e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x334>
 80022b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4a69      	ldr	r2, [pc, #420]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	6213      	str	r3, [r2, #32]
 80022c2:	4b67      	ldr	r3, [pc, #412]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a66      	ldr	r2, [pc, #408]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	e01c      	b.n	800230a <HAL_RCC_OscConfig+0x36e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x356>
 80022d8:	4b61      	ldr	r3, [pc, #388]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4a60      	ldr	r2, [pc, #384]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	6213      	str	r3, [r2, #32]
 80022e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e00b      	b.n	800230a <HAL_RCC_OscConfig+0x36e>
 80022f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	4b58      	ldr	r3, [pc, #352]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a57      	ldr	r2, [pc, #348]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d015      	beq.n	800233e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7ff fb67 	bl	80019e4 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7ff fb63 	bl	80019e4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0b1      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002330:	4b4b      	ldr	r3, [pc, #300]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ee      	beq.n	800231a <HAL_RCC_OscConfig+0x37e>
 800233c:	e014      	b.n	8002368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff fb51 	bl	80019e4 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7ff fb4d 	bl	80019e4 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e09b      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235c:	4b40      	ldr	r3, [pc, #256]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d105      	bne.n	800237a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236e:	4b3c      	ldr	r3, [pc, #240]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a3b      	ldr	r2, [pc, #236]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8087 	beq.w	8002492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002384:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	d061      	beq.n	8002454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d146      	bne.n	8002426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7ff fb21 	bl	80019e4 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7ff fb1d 	bl	80019e4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e06d      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023cc:	d108      	bne.n	80023e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	4921      	ldr	r1, [pc, #132]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a19      	ldr	r1, [r3, #32]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	430b      	orrs	r3, r1
 80023f2:	491b      	ldr	r1, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_RCC_OscConfig+0x4cc>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff faf1 	bl	80019e4 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff faed 	bl	80019e4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e03d      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x46a>
 8002424:	e035      	b.n	8002492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <HAL_RCC_OscConfig+0x4cc>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fada 	bl	80019e4 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7ff fad6 	bl	80019e4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e026      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x498>
 8002452:	e01e      	b.n	8002492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e019      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_RCC_OscConfig+0x500>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	429a      	cmp	r2, r3
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000

080024a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0d0      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d910      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b67      	ldr	r3, [pc, #412]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0207 	bic.w	r2, r3, #7
 80024ca:	4965      	ldr	r1, [pc, #404]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a52      	ldr	r2, [pc, #328]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800251e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d040      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d115      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d107      	bne.n	800256e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255e:	4b41      	ldr	r3, [pc, #260]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e073      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06b      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800257e:	4b39      	ldr	r3, [pc, #228]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f023 0203 	bic.w	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4936      	ldr	r1, [pc, #216]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002590:	f7ff fa28 	bl	80019e4 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	e00a      	b.n	80025ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002598:	f7ff fa24 	bl	80019e4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e053      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 020c 	and.w	r2, r3, #12
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	429a      	cmp	r2, r3
 80025be:	d1eb      	bne.n	8002598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c0:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d210      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4922      	ldr	r1, [pc, #136]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f821 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_RCC_ClockConfig+0x1cc>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1d0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f986 	bl	8001960 <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	08002f80 	.word	0x08002f80
 800266c:	2000005c 	.word	0x2000005c
 8002670:	20000060 	.word	0x20000060

08002674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x94>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d002      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x30>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0x36>
 80026a2:	e027      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a4:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_RCC_GetSysClockFreq+0x98>)
 80026a6:	613b      	str	r3, [r7, #16]
      break;
 80026a8:	e027      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	0c9b      	lsrs	r3, r3, #18
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026b4:	5cd3      	ldrb	r3, [r2, r3]
 80026b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026c2:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x94>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0c5b      	lsrs	r3, r3, #17
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	4a11      	ldr	r2, [pc, #68]	@ (8002714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <HAL_RCC_GetSysClockFreq+0x98>)
 80026d6:	fb03 f202 	mul.w	r2, r3, r2
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e004      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	613b      	str	r3, [r7, #16]
      break;
 80026f2:	e002      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_RCC_GetSysClockFreq+0x98>)
 80026f6:	613b      	str	r3, [r7, #16]
      break;
 80026f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fa:	693b      	ldr	r3, [r7, #16]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	007a1200 	.word	0x007a1200
 8002710:	08002f90 	.word	0x08002f90
 8002714:	08002fa0 	.word	0x08002fa0
 8002718:	003d0900 	.word	0x003d0900

0800271c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002724:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <RCC_Delay+0x34>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <RCC_Delay+0x38>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0a5b      	lsrs	r3, r3, #9
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002738:	bf00      	nop
  }
  while (Delay --);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	60fa      	str	r2, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f9      	bne.n	8002738 <RCC_Delay+0x1c>
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	2000005c 	.word	0x2000005c
 8002754:	10624dd3 	.word	0x10624dd3

08002758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e041      	b.n	80027ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe ffaa 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f000 fa56 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d001      	beq.n	8002810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e035      	b.n	800287c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <HAL_TIM_Base_Start_IT+0x90>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d009      	beq.n	8002846 <HAL_TIM_Base_Start_IT+0x4e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800283a:	d004      	beq.n	8002846 <HAL_TIM_Base_Start_IT+0x4e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a12      	ldr	r2, [pc, #72]	@ (800288c <HAL_TIM_Base_Start_IT+0x94>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d111      	bne.n	800286a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b06      	cmp	r3, #6
 8002856:	d010      	beq.n	800287a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002868:	e007      	b.n	800287a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40000400 	.word	0x40000400

08002890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0202 	mvn.w	r2, #2
 80028c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f998 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f98b 	bl	8002bfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f99a 	bl	8002c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0204 	mvn.w	r2, #4
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f972 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f965 	bl	8002bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f974 	bl	8002c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0208 	mvn.w	r2, #8
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2204      	movs	r2, #4
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f94c 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f93f 	bl	8002bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f94e 	bl	8002c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d020      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0210 	mvn.w	r2, #16
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2208      	movs	r2, #8
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f926 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f919 	bl	8002bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f928 	bl	8002c22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0201 	mvn.w	r2, #1
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fc1e 	bl	8001238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa6f 	bl	8002efe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8f8 	bl	8002c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0220 	mvn.w	r2, #32
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fa42 	bl	8002eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIM_ConfigClockSource+0x1c>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e0b4      	b.n	8002bf6 <HAL_TIM_ConfigClockSource+0x186>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002aaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ab2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac4:	d03e      	beq.n	8002b44 <HAL_TIM_ConfigClockSource+0xd4>
 8002ac6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aca:	f200 8087 	bhi.w	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad2:	f000 8086 	beq.w	8002be2 <HAL_TIM_ConfigClockSource+0x172>
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ada:	d87f      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002adc:	2b70      	cmp	r3, #112	@ 0x70
 8002ade:	d01a      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0xa6>
 8002ae0:	2b70      	cmp	r3, #112	@ 0x70
 8002ae2:	d87b      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ae4:	2b60      	cmp	r3, #96	@ 0x60
 8002ae6:	d050      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x11a>
 8002ae8:	2b60      	cmp	r3, #96	@ 0x60
 8002aea:	d877      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002aec:	2b50      	cmp	r3, #80	@ 0x50
 8002aee:	d03c      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0xfa>
 8002af0:	2b50      	cmp	r3, #80	@ 0x50
 8002af2:	d873      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002af4:	2b40      	cmp	r3, #64	@ 0x40
 8002af6:	d058      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x13a>
 8002af8:	2b40      	cmp	r3, #64	@ 0x40
 8002afa:	d86f      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002afc:	2b30      	cmp	r3, #48	@ 0x30
 8002afe:	d064      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x15a>
 8002b00:	2b30      	cmp	r3, #48	@ 0x30
 8002b02:	d86b      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d060      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x15a>
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d867      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d05c      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x15a>
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d05a      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x15a>
 8002b14:	e062      	b.n	8002bdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b26:	f000 f96a 	bl	8002dfe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	609a      	str	r2, [r3, #8]
      break;
 8002b42:	e04f      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b54:	f000 f953 	bl	8002dfe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b66:	609a      	str	r2, [r3, #8]
      break;
 8002b68:	e03c      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b76:	461a      	mov	r2, r3
 8002b78:	f000 f8ca 	bl	8002d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2150      	movs	r1, #80	@ 0x50
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f921 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 8002b88:	e02c      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b96:	461a      	mov	r2, r3
 8002b98:	f000 f8e8 	bl	8002d6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2160      	movs	r1, #96	@ 0x60
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f911 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e01c      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f000 f8aa 	bl	8002d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2140      	movs	r1, #64	@ 0x40
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f901 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 8002bc8:	e00c      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f000 f8f8 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 8002bda:	e003      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e000      	b.n	8002be4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002d08 <TIM_Base_SetConfig+0xc0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <TIM_Base_SetConfig+0x28>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c66:	d003      	beq.n	8002c70 <TIM_Base_SetConfig+0x28>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a28      	ldr	r2, [pc, #160]	@ (8002d0c <TIM_Base_SetConfig+0xc4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d108      	bne.n	8002c82 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a20      	ldr	r2, [pc, #128]	@ (8002d08 <TIM_Base_SetConfig+0xc0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0x52>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0x52>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	@ (8002d0c <TIM_Base_SetConfig+0xc4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <TIM_Base_SetConfig+0xc0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d103      	bne.n	8002ce0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	611a      	str	r2, [r3, #16]
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	40000400 	.word	0x40000400

08002d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f023 0201 	bic.w	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f023 030a 	bic.w	r3, r3, #10
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0210 	bic.w	r2, r3, #16
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	031b      	lsls	r3, r3, #12
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002da8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	621a      	str	r2, [r3, #32]
}
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f043 0307 	orr.w	r3, r3, #7
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b087      	sub	sp, #28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	609a      	str	r2, [r3, #8]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e041      	b.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a14      	ldr	r2, [pc, #80]	@ (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea0:	d004      	beq.n	8002eac <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	@ (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40000400 	.word	0x40000400

08002eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <memset>:
 8002f10:	4603      	mov	r3, r0
 8002f12:	4402      	add	r2, r0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d100      	bne.n	8002f1a <memset+0xa>
 8002f18:	4770      	bx	lr
 8002f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1e:	e7f9      	b.n	8002f14 <memset+0x4>

08002f20 <__libc_init_array>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	2600      	movs	r6, #0
 8002f24:	4d0c      	ldr	r5, [pc, #48]	@ (8002f58 <__libc_init_array+0x38>)
 8002f26:	4c0d      	ldr	r4, [pc, #52]	@ (8002f5c <__libc_init_array+0x3c>)
 8002f28:	1b64      	subs	r4, r4, r5
 8002f2a:	10a4      	asrs	r4, r4, #2
 8002f2c:	42a6      	cmp	r6, r4
 8002f2e:	d109      	bne.n	8002f44 <__libc_init_array+0x24>
 8002f30:	f000 f81a 	bl	8002f68 <_init>
 8002f34:	2600      	movs	r6, #0
 8002f36:	4d0a      	ldr	r5, [pc, #40]	@ (8002f60 <__libc_init_array+0x40>)
 8002f38:	4c0a      	ldr	r4, [pc, #40]	@ (8002f64 <__libc_init_array+0x44>)
 8002f3a:	1b64      	subs	r4, r4, r5
 8002f3c:	10a4      	asrs	r4, r4, #2
 8002f3e:	42a6      	cmp	r6, r4
 8002f40:	d105      	bne.n	8002f4e <__libc_init_array+0x2e>
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f48:	4798      	blx	r3
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7ee      	b.n	8002f2c <__libc_init_array+0xc>
 8002f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f52:	4798      	blx	r3
 8002f54:	3601      	adds	r6, #1
 8002f56:	e7f2      	b.n	8002f3e <__libc_init_array+0x1e>
 8002f58:	08002fa4 	.word	0x08002fa4
 8002f5c:	08002fa4 	.word	0x08002fa4
 8002f60:	08002fa4 	.word	0x08002fa4
 8002f64:	08002fa8 	.word	0x08002fa8

08002f68 <_init>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	bf00      	nop
 8002f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6e:	bc08      	pop	{r3}
 8002f70:	469e      	mov	lr, r3
 8002f72:	4770      	bx	lr

08002f74 <_fini>:
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f76:	bf00      	nop
 8002f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7a:	bc08      	pop	{r3}
 8002f7c:	469e      	mov	lr, r3
 8002f7e:	4770      	bx	lr
